// rules from malpedia (https://malpedia.caad.fkie.fraunhofer.de/)

rule osx_uroburos_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-10-14"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.5.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/osx.uroburos"
        malpedia_rule_date = "20201014"
        malpedia_hash = "a7e3bd57eaf12bf3ea29a863c041091ba3af9ac9"
        malpedia_version = "20201014"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e9???????? 4c 8975c0 49 83bf3002000000 0f84dd010000 41 }
            // n = 7, score = 100
            //   e9????????           |                     
            //   4c                   | dec                 esp
            //   8975c0               | mov                 dword ptr [ebp - 0x40], esi
            //   49                   | dec                 ecx
            //   83bf3002000000       | cmp                 dword ptr [edi + 0x230], 0
            //   0f84dd010000         | je                  0x1e3
            //   41                   | inc                 ecx

        $sequence_1 = { 8d0df13d0500 48 8b4920 49 894e30 48 83c418 }
            // n = 7, score = 100
            //   8d0df13d0500         | lea                 ecx, [0x53df1]
            //   48                   | dec                 eax
            //   8b4920               | mov                 ecx, dword ptr [ecx + 0x20]
            //   49                   | dec                 ecx
            //   894e30               | mov                 dword ptr [esi + 0x30], ecx
            //   48                   | dec                 eax
            //   83c418               | add                 esp, 0x18

        $sequence_2 = { e8???????? 85c0 7e3b 4c 8d7dd0 90 48 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   7e3b                 | jle                 0x3d
            //   4c                   | dec                 esp
            //   8d7dd0               | lea                 edi, [ebp - 0x30]
            //   90                   | nop                 
            //   48                   | dec                 eax

        $sequence_3 = { eb48 b801000000 eb41 b801000000 eb3a 48 8b7b08 }
            // n = 7, score = 100
            //   eb48                 | jmp                 0x4a
            //   b801000000           | mov                 eax, 1
            //   eb41                 | jmp                 0x43
            //   b801000000           | mov                 eax, 1
            //   eb3a                 | jmp                 0x3c
            //   48                   | dec                 eax
            //   8b7b08               | mov                 edi, dword ptr [ebx + 8]

        $sequence_4 = { c707???????? bf???????? e8???????? 49 890424 48 85c0 }
            // n = 7, score = 100
            //   c707????????         |                     
            //   bf????????           |                     
            //   e8????????           |                     
            //   49                   | dec                 ecx
            //   890424               | mov                 dword ptr [esp], eax
            //   48                   | dec                 eax
            //   85c0                 | test                eax, eax

        $sequence_5 = { c7450000000000 41 bc0a005921 eb1b 48 8b7dd0 e8???????? }
            // n = 7, score = 100
            //   c7450000000000       | mov                 dword ptr [ebp], 0
            //   41                   | inc                 ecx
            //   bc0a005921           | mov                 esp, 0x2159000a
            //   eb1b                 | jmp                 0x1d
            //   48                   | dec                 eax
            //   8b7dd0               | mov                 edi, dword ptr [ebp - 0x30]
            //   e8????????           |                     

        $sequence_6 = { eb39 48 8d3538a50500 ba???????? 48 89df e8???????? }
            // n = 7, score = 100
            //   eb39                 | jmp                 0x3b
            //   48                   | dec                 eax
            //   8d3538a50500         | lea                 esi, [0x5a538]
            //   ba????????           |                     
            //   48                   | dec                 eax
            //   89df                 | mov                 edi, ebx
            //   e8????????           |                     

        $sequence_7 = { 8945d0 48 39c8 49 89cd 772d 4c }
            // n = 7, score = 100
            //   8945d0               | mov                 dword ptr [ebp - 0x30], eax
            //   48                   | dec                 eax
            //   39c8                 | cmp                 eax, ecx
            //   49                   | dec                 ecx
            //   89cd                 | mov                 ebp, ecx
            //   772d                 | ja                  0x2f
            //   4c                   | dec                 esp

        $sequence_8 = { e8???????? 49 89c6 4d 85f6 0f84ff030000 48 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   49                   | dec                 ecx
            //   89c6                 | mov                 esi, eax
            //   4d                   | dec                 ebp
            //   85f6                 | test                esi, esi
            //   0f84ff030000         | je                  0x405
            //   48                   | dec                 eax

        $sequence_9 = { eb03 4d 89e7 48 63c3 c68405d0fdffff00 80bdd0fdffff00 }
            // n = 7, score = 100
            //   eb03                 | jmp                 5
            //   4d                   | dec                 ebp
            //   89e7                 | mov                 edi, esp
            //   48                   | dec                 eax
            //   63c3                 | arpl                bx, ax
            //   c68405d0fdffff00     | mov                 byte ptr [ebp + eax - 0x230], 0
            //   80bdd0fdffff00       | cmp                 byte ptr [ebp - 0x230], 0

    condition:
        7 of them and filesize < 4020856
}rule win_agent_btz_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.agent_btz"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c74608ffffffff f644240801 7409 56 }
            // n = 4, score = 2500
            //   c74608ffffffff       | mov                 dword ptr [esi + 8], 0xffffffff
            //   f644240801           | test                byte ptr [esp + 8], 1
            //   7409                 | je                  0xb
            //   56                   | push                esi

        $sequence_1 = { ffd3 85c0 75d8 5f }
            // n = 4, score = 2500
            //   ffd3                 | call                ebx
            //   85c0                 | test                eax, eax
            //   75d8                 | jne                 0xffffffda
            //   5f                   | pop                 edi

        $sequence_2 = { ffd6 8d54240c 52 ffd7 }
            // n = 4, score = 2500
            //   ffd6                 | call                esi
            //   8d54240c             | lea                 edx, [esp + 0xc]
            //   52                   | push                edx
            //   ffd7                 | call                edi

        $sequence_3 = { b803000f00 8b4df4 64890d00000000 5f }
            // n = 4, score = 2400
            //   b803000f00           | je                  0x10
            //   8b4df4               | push                esi
            //   64890d00000000       | call                esi
            //   5f                   | lea                 edx, [esp + 0xc]

        $sequence_4 = { c7460c00000000 895e08 895e04 c7461000000000 }
            // n = 4, score = 2400
            //   c7460c00000000       | call                ebx
            //   895e08               | test                eax, eax
            //   895e04               | jne                 0xffffffde
            //   c7461000000000       | lea                 ecx, [esp + 0xc]

        $sequence_5 = { ff15???????? b804000f00 8b4df4 64890d00000000 }
            // n = 4, score = 2400
            //   ff15????????         |                     
            //   b804000f00           | add                 esp, 4
            //   8b4df4               | mov                 dword ptr [esi + 8], 0xffffffff
            //   64890d00000000       | test                byte ptr [esp + 8], 1

        $sequence_6 = { 6a00 50 ff15???????? 894614 }
            // n = 4, score = 2300
            //   6a00                 | mov                 eax, 0xf0004
            //   50                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   ff15????????         |                     
            //   894614               | mov                 dword ptr fs:[0], ecx

        $sequence_7 = { 56 6a00 68???????? 8935???????? }
            // n = 4, score = 2300
            //   56                   | mov                 dword ptr [esi + 8], ebx
            //   6a00                 | mov                 dword ptr [esi + 4], ebx
            //   68????????           |                     
            //   8935????????         |                     

        $sequence_8 = { 56 8bf1 8b4608 c706???????? 85c0 7413 }
            // n = 6, score = 2200
            //   56                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   8bf1                 | mov                 dword ptr fs:[0], ecx
            //   8b4608               | pop                 edi
            //   c706????????         |                     
            //   85c0                 | pop                 esi
            //   7413                 | mov                 eax, 0xf0003

        $sequence_9 = { 7413 83f8ff 740e 50 ff15???????? c74608ffffffff f644240801 }
            // n = 7, score = 2200
            //   7413                 | mov                 dword ptr [esi + 0xc], 0
            //   83f8ff               | mov                 dword ptr [esi + 8], ebx
            //   740e                 | mov                 dword ptr [esi + 4], ebx
            //   50                   | mov                 dword ptr [esi + 0x10], 0
            //   ff15????????         |                     
            //   c74608ffffffff       | mov                 dword ptr [esi + 0x14], ebx
            //   f644240801           | mov                 dword ptr [esi + 0xc], 0

        $sequence_10 = { 6a0a 68???????? 6a01 6a00 68???????? }
            // n = 5, score = 1400
            //   6a0a                 | push                0xa
            //   68????????           |                     
            //   6a01                 | push                1
            //   6a00                 | push                0
            //   68????????           |                     

        $sequence_11 = { 51 6a00 6819000200 6a00 68???????? }
            // n = 5, score = 1400
            //   51                   | push                ecx
            //   6a00                 | push                0
            //   6819000200           | push                0x20019
            //   6a00                 | push                0
            //   68????????           |                     

        $sequence_12 = { 50 68???????? 6a01 68???????? e8???????? 83c410 }
            // n = 6, score = 1200
            //   50                   | mov                 dword ptr fs:[0], ecx
            //   68????????           |                     
            //   6a01                 | pop                 edi
            //   68????????           |                     
            //   e8????????           |                     
            //   83c410               | pop                 esi

        $sequence_13 = { 6a01 6a04 6a01 68???????? }
            // n = 4, score = 1100
            //   6a01                 | push                1
            //   6a04                 | push                4
            //   6a01                 | push                1
            //   68????????           |                     

        $sequence_14 = { 50 e8???????? 83c408 6800010000 e8???????? }
            // n = 5, score = 1000
            //   50                   | mov                 eax, 0xf0003
            //   e8????????           |                     
            //   83c408               | mov                 ecx, dword ptr [ebp - 0xc]
            //   6800010000           | mov                 dword ptr fs:[0], ecx
            //   e8????????           |                     

        $sequence_15 = { 89461c 3dea000000 740b 3de5030000 }
            // n = 4, score = 1000
            //   89461c               | mov                 dword ptr [esi + 8], ebx
            //   3dea000000           | mov                 dword ptr [esi + 4], ebx
            //   740b                 | mov                 dword ptr [esi + 0x10], 0
            //   3de5030000           | mov                 dword ptr [esi + 0x14], ebx

        $sequence_16 = { 7511 e8???????? 83c020 50 }
            // n = 4, score = 1000
            //   7511                 | jne                 0x13
            //   e8????????           |                     
            //   83c020               | add                 eax, 0x20
            //   50                   | push                eax

        $sequence_17 = { 83c020 50 e8???????? 83c404 33c0 }
            // n = 5, score = 1000
            //   83c020               | add                 eax, 0x20
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   33c0                 | xor                 eax, eax

        $sequence_18 = { 50 68???????? 6a01 e8???????? 50 e8???????? }
            // n = 6, score = 1000
            //   50                   | push                eax
            //   68????????           |                     
            //   6a01                 | push                1
            //   e8????????           |                     
            //   50                   | push                eax
            //   e8????????           |                     

        $sequence_19 = { 6a01 68???????? e8???????? 83c414 5f 5e }
            // n = 6, score = 1000
            //   6a01                 | mov                 dword ptr [esi + 0x14], eax
            //   68????????           |                     
            //   e8????????           |                     
            //   83c414               | xor                 eax, eax
            //   5f                   | xor                 ebx, ebx
            //   5e                   | mov                 dword ptr [esi + 0x14], eax

        $sequence_20 = { c645cb25 c645cc78 c645cd25 c645ce78 885dcf c68578ffffff43 c68579ffffff6f }
            // n = 7, score = 900
            //   c645cb25             | pop                 esi
            //   c645cc78             | pop                 ebx
            //   c645cd25             | mov                 eax, 0xf0005
            //   c645ce78             | mov                 ecx, dword ptr [ebp - 0xc]
            //   885dcf               | mov                 dword ptr fs:[0], ecx
            //   c68578ffffff43       | pop                 edi
            //   c68579ffffff6f       | mov                 eax, 0xf0003

        $sequence_21 = { c684248e00000050 c684248f00000072 c68424900000006f c684249100000063 c684249200000065 c684249300000073 c684249400000073 }
            // n = 7, score = 900
            //   c684248e00000050     | mov                 byte ptr [esp + 0x8e], 0x50
            //   c684248f00000072     | mov                 byte ptr [esp + 0x8f], 0x72
            //   c68424900000006f     | mov                 byte ptr [esp + 0x90], 0x6f
            //   c684249100000063     | mov                 byte ptr [esp + 0x91], 0x63
            //   c684249200000065     | mov                 byte ptr [esp + 0x92], 0x65
            //   c684249300000073     | mov                 byte ptr [esp + 0x93], 0x73
            //   c684249400000073     | mov                 byte ptr [esp + 0x94], 0x73

        $sequence_22 = { c684241601000074 c684241701000045 c684241801000072 c684241901000072 c684241a0100006f }
            // n = 5, score = 900
            //   c684241601000074     | mov                 byte ptr [esp + 0x116], 0x74
            //   c684241701000045     | mov                 byte ptr [esp + 0x117], 0x45
            //   c684241801000072     | mov                 byte ptr [esp + 0x118], 0x72
            //   c684241901000072     | mov                 byte ptr [esp + 0x119], 0x72
            //   c684241a0100006f     | mov                 byte ptr [esp + 0x11a], 0x6f

        $sequence_23 = { c684249200000065 c684249300000073 c684249400000073 c684249500000057 c684249600000000 c684241001000047 }
            // n = 6, score = 900
            //   c684249200000065     | mov                 byte ptr [esp + 0x92], 0x65
            //   c684249300000073     | mov                 byte ptr [esp + 0x93], 0x73
            //   c684249400000073     | mov                 byte ptr [esp + 0x94], 0x73
            //   c684249500000057     | mov                 byte ptr [esp + 0x95], 0x57
            //   c684249600000000     | mov                 byte ptr [esp + 0x96], 0
            //   c684241001000047     | mov                 byte ptr [esp + 0x110], 0x47

        $sequence_24 = { c684248a00000065 c684248b00000061 c684248c00000074 c684248d00000065 c684248e00000050 c684248f00000072 c68424900000006f }
            // n = 7, score = 900
            //   c684248a00000065     | mov                 byte ptr [esp + 0x8a], 0x65
            //   c684248b00000061     | mov                 byte ptr [esp + 0x8b], 0x61
            //   c684248c00000074     | mov                 byte ptr [esp + 0x8c], 0x74
            //   c684248d00000065     | mov                 byte ptr [esp + 0x8d], 0x65
            //   c684248e00000050     | mov                 byte ptr [esp + 0x8e], 0x50
            //   c684248f00000072     | mov                 byte ptr [esp + 0x8f], 0x72
            //   c68424900000006f     | mov                 byte ptr [esp + 0x90], 0x6f

        $sequence_25 = { c9 c3 83c8ff eb11 0fb611 ff4c2404 83ca04 }
            // n = 7, score = 900
            //   c9                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   c3                   | mov                 dword ptr fs:[0], ecx
            //   83c8ff               | pop                 edi
            //   eb11                 | pop                 esi
            //   0fb611               | pop                 ebx
            //   ff4c2404             | mov                 eax, 0xf0005
            //   83ca04               | mov                 ecx, dword ptr [ebp - 0xc]

        $sequence_26 = { c684241001000047 c684241101000065 c684241201000074 c68424130100004c c684241401000061 c684241501000073 }
            // n = 6, score = 900
            //   c684241001000047     | mov                 byte ptr [esp + 0x110], 0x47
            //   c684241101000065     | mov                 byte ptr [esp + 0x111], 0x65
            //   c684241201000074     | mov                 byte ptr [esp + 0x112], 0x74
            //   c68424130100004c     | mov                 byte ptr [esp + 0x113], 0x4c
            //   c684241401000061     | mov                 byte ptr [esp + 0x114], 0x61
            //   c684241501000073     | mov                 byte ptr [esp + 0x115], 0x73

        $sequence_27 = { ebd2 c78424a000000068000000 c78424dc00000001000000 33c0 66898424e0000000 }
            // n = 5, score = 900
            //   ebd2                 | jmp                 0xffffffd4
            //   c78424a000000068000000     | mov    dword ptr [esp + 0xa0], 0x68
            //   c78424dc00000001000000     | mov    dword ptr [esp + 0xdc], 1
            //   33c0                 | xor                 eax, eax
            //   66898424e0000000     | mov                 word ptr [esp + 0xe0], ax

        $sequence_28 = { 6800004004 53 53 8d4dd8 }
            // n = 4, score = 900
            //   6800004004           | mov                 eax, 0xf0004
            //   53                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   53                   | mov                 dword ptr fs:[0], ecx
            //   8d4dd8               | mov                 dword ptr [esi + 0xc], 0

        $sequence_29 = { 50 8d85e8fdffff 50 c745fc04010000 }
            // n = 4, score = 900
            //   50                   | mov                 dword ptr fs:[0], ecx
            //   8d85e8fdffff         | pop                 edi
            //   50                   | pop                 esi
            //   c745fc04010000       | pop                 ebx

        $sequence_30 = { c685fcfeffff2d c685fdfeffff2d c685fefeffff25 c685fffeffff73 c68500ffffff0d c68501ffffff0a c68502ffffff43 }
            // n = 7, score = 900
            //   c685fcfeffff2d       | mov                 byte ptr [ebp - 0x104], 0x2d
            //   c685fdfeffff2d       | mov                 byte ptr [ebp - 0x103], 0x2d
            //   c685fefeffff25       | mov                 byte ptr [ebp - 0x102], 0x25
            //   c685fffeffff73       | mov                 byte ptr [ebp - 0x101], 0x73
            //   c68500ffffff0d       | mov                 byte ptr [ebp - 0x100], 0xd
            //   c68501ffffff0a       | mov                 byte ptr [ebp - 0xff], 0xa
            //   c68502ffffff43       | mov                 byte ptr [ebp - 0xfe], 0x43

        $sequence_31 = { c645b92d c645ba2d c645bb2d c645bc2d c645bd2d c645be2d c645bf2d }
            // n = 7, score = 900
            //   c645b92d             | mov                 dword ptr [esi + 8], ebx
            //   c645ba2d             | mov                 dword ptr [esi + 4], ebx
            //   c645bb2d             | mov                 dword ptr [esi + 0x10], 0
            //   c645bc2d             | mov                 eax, 0xf0005
            //   c645bd2d             | mov                 ecx, dword ptr [ebp - 0xc]
            //   c645be2d             | mov                 dword ptr fs:[0], ecx
            //   c645bf2d             | pop                 edi

        $sequence_32 = { 33c0 897e1c 5f 5b c9 c3 }
            // n = 6, score = 900
            //   33c0                 | xor                 eax, eax
            //   897e1c               | mov                 dword ptr [esi + 0x1c], edi
            //   5f                   | pop                 edi
            //   5b                   | pop                 ebx
            //   c9                   | leave               
            //   c3                   | ret                 

        $sequence_33 = { 6a00 6a27 6a02 6a00 6a01 }
            // n = 5, score = 800
            //   6a00                 | push                0
            //   6a27                 | push                0x27
            //   6a02                 | push                2
            //   6a00                 | push                0
            //   6a01                 | push                1

        $sequence_34 = { c645d316 c645d43a c645d53b c645d63b c645d730 c645d836 }
            // n = 6, score = 700
            //   c645d316             | mov                 byte ptr [ebp - 0x2d], 0x16
            //   c645d43a             | mov                 byte ptr [ebp - 0x2c], 0x3a
            //   c645d53b             | mov                 byte ptr [ebp - 0x2b], 0x3b
            //   c645d63b             | mov                 byte ptr [ebp - 0x2a], 0x3b
            //   c645d730             | mov                 byte ptr [ebp - 0x29], 0x30
            //   c645d836             | mov                 byte ptr [ebp - 0x28], 0x36

        $sequence_35 = { 8d8505feffff 50 e8???????? 83c40c }
            // n = 4, score = 700
            //   8d8505feffff         | push                0
            //   50                   | push                0x80000002
            //   e8????????           |                     
            //   83c40c               | push                eax

        $sequence_36 = { 488b4338 33d2 488bce 448d4220 }
            // n = 4, score = 500
            //   488b4338             | lea                 ecx, [esp + 0x50]
            //   33d2                 | inc                 esp
            //   488bce               | mov                 eax, ebx
            //   448d4220             | dec                 eax

        $sequence_37 = { 83c904 c1e803 448bc9 440fafc8 }
            // n = 4, score = 500
            //   83c904               | dec                 esp
            //   c1e803               | lea                 ecx, [esp + 0x50]
            //   448bc9               | inc                 esp
            //   440fafc8             | mov                 eax, ebx

        $sequence_38 = { 488bcf c744242088130000 e8???????? 488b5738 }
            // n = 4, score = 500
            //   488bcf               | inc                 esp
            //   c744242088130000     | mov                 eax, ebx
            //   e8????????           |                     
            //   488b5738             | dec                 eax

        $sequence_39 = { 488b4638 488b0e 4c8d442450 4533c9 }
            // n = 4, score = 500
            //   488b4638             | lea                 ecx, [esp + 0x50]
            //   488b0e               | inc                 esp
            //   4c8d442450           | mov                 eax, ebx
            //   4533c9               | dec                 eax

        $sequence_40 = { 488b0e 48894628 488b4638 4c8d4c2450 }
            // n = 4, score = 500
            //   488b0e               | dec                 eax
            //   48894628             | mov                 ecx, dword ptr [esi]
            //   488b4638             | dec                 eax
            //   4c8d4c2450           | mov                 dword ptr [esi + 0x28], eax

        $sequence_41 = { 488b4638 4c8d4c2450 448bc3 488bd7 }
            // n = 4, score = 500
            //   488b4638             | dec                 eax
            //   4c8d4c2450           | mov                 eax, dword ptr [esi + 8]
            //   448bc3               | dec                 eax
            //   488bd7               | mov                 ecx, dword ptr [esi]

        $sequence_42 = { 488bf0 c70005000000 85db 7415 4c8b4f38 488d4804 }
            // n = 6, score = 400
            //   488bf0               | mov                 eax, dword ptr [esi + 0x38]
            //   c70005000000         | dec                 esp
            //   85db                 | lea                 ecx, [esp + 0x50]
            //   7415                 | inc                 esp
            //   4c8b4f38             | mov                 eax, ebx
            //   488d4804             | dec                 eax

        $sequence_43 = { ff9058020000 488bf0 c7000d000000 895804 897808 }
            // n = 5, score = 400
            //   ff9058020000         | mov                 eax, dword ptr [ebx + 0x38]
            //   488bf0               | xor                 edx, edx
            //   c7000d000000         | dec                 eax
            //   895804               | mov                 ecx, esi
            //   897808               | inc                 esp

        $sequence_44 = { 8d8594faffff 50 68???????? ff15???????? }
            // n = 4, score = 200
            //   8d8594faffff         | mov                 dword ptr fs:[0], ecx
            //   50                   | pop                 edi
            //   68????????           |                     
            //   ff15????????         |                     

        $sequence_45 = { 59 68???????? e8???????? 59 8b0c9d10c04100 33c0 }
            // n = 6, score = 100
            //   59                   | mov                 dword ptr [esi + 4], ebx
            //   68????????           |                     
            //   e8????????           |                     
            //   59                   | mov                 eax, 0xf0000
            //   8b0c9d10c04100       | mov                 ecx, dword ptr [ebp - 0xc]
            //   33c0                 | mov                 dword ptr fs:[0], ecx

        $sequence_46 = { ff15???????? 56 ff15???????? 5e c3 33c0 5e }
            // n = 7, score = 100
            //   ff15????????         |                     
            //   56                   | mov                 eax, 0xf0004
            //   ff15????????         |                     
            //   5e                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   c3                   | mov                 dword ptr fs:[0], ecx
            //   33c0                 | pop                 edi
            //   5e                   | pop                 esi

        $sequence_47 = { 50 6a00 6a00 6a1c 8d44247c }
            // n = 5, score = 100
            //   50                   | pop                 edi
            //   6a00                 | pop                 esi
            //   6a00                 | mov                 eax, 0xf0004
            //   6a1c                 | mov                 ecx, dword ptr [ebp - 0xc]
            //   8d44247c             | mov                 dword ptr fs:[0], ecx

        $sequence_48 = { 33db b86e6b0000 66394204 0f94c3 85db 0f84a5000000 8b4c2428 }
            // n = 7, score = 100
            //   33db                 | mov                 eax, 0xf0000
            //   b86e6b0000           | mov                 ecx, dword ptr [ebp - 0xc]
            //   66394204             | mov                 dword ptr fs:[0], ecx
            //   0f94c3               | pop                 edi
            //   85db                 | mov                 dword ptr [esi + 0xc], 0
            //   0f84a5000000         | mov                 dword ptr [esi + 8], ebx
            //   8b4c2428             | mov                 dword ptr [esi + 4], ebx

        $sequence_49 = { 8bf0 59 59 85f6 7469 8b4c2414 2b01 }
            // n = 7, score = 100
            //   8bf0                 | mov                 eax, 0xf0000
            //   59                   | mov                 ecx, dword ptr [ebp - 0xc]
            //   59                   | mov                 dword ptr fs:[0], ecx
            //   85f6                 | pop                 edi
            //   7469                 | mov                 eax, 0xf0005
            //   8b4c2414             | mov                 ecx, dword ptr [ebp - 0xc]
            //   2b01                 | mov                 dword ptr fs:[0], ecx

        $sequence_50 = { 8b4c2410 e8???????? 53 ffd5 }
            // n = 4, score = 100
            //   8b4c2410             | mov                 dword ptr [esi + 0x10], 0
            //   e8????????           |                     
            //   53                   | mov                 dword ptr [esi + 0xc], 0
            //   ffd5                 | mov                 dword ptr [esi + 8], ebx

        $sequence_51 = { 3bf1 0f8d40010000 8b04f568124200 8945e0 8b1cf56c124200 3bc7 }
            // n = 6, score = 100
            //   3bf1                 | pop                 edi
            //   0f8d40010000         | pop                 esi
            //   8b04f568124200       | pop                 ebx
            //   8945e0               | mov                 eax, 0xf0000
            //   8b1cf56c124200       | mov                 ecx, dword ptr [ebp - 0xc]
            //   3bc7                 | mov                 dword ptr fs:[0], ecx

    condition:
        7 of them and filesize < 3779584
}rule win_agent_btz_w0 {
    meta:
        author = "Symantec"
        source = "https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf"
        contribution = "pnx - removed FPs"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.agent_btz"
        malpedia_version = "20171113"
        malpedia_sharing = "TLP:WHITE"
        malpedia_license = ""
    strings:
        $b = {C645????}
        $c = {C685??FEFFFF??}
        $d = {FFA0??0?0000}
        $e = {89A8??00000068??00000056FFD78B}
        $f = {00004889????030000488B}
        $tmp_fn = "FA.tmp"
    condition:
        ((#c > 200 and #b > 200 ) or (#d > 40) and (#e > 15 or #f > 30)) and $tmp_fn
}
rule win_cobra_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cobra"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 7511 e8???????? 85c0 7508 ff15???????? }
            // n = 5, score = 2900
            //   7511                 | jne                 0x13
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   7508                 | jne                 0xa
            //   ff15????????         |                     

        $sequence_1 = { 5b c3 85ff 7418 }
            // n = 4, score = 2500
            //   5b                   | pop                 ebx
            //   c3                   | ret                 
            //   85ff                 | test                edi, edi
            //   7418                 | je                  0x1a

        $sequence_2 = { 753c b980000000 e8???????? 85c0 a3???????? 7504 }
            // n = 6, score = 2500
            //   753c                 | jne                 0x3e
            //   b980000000           | mov                 ecx, 0x80
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   a3????????           |                     
            //   7504                 | jne                 6

        $sequence_3 = { 5e 5b c3 85db 7405 83fb03 }
            // n = 6, score = 2500
            //   5e                   | pop                 esi
            //   5b                   | pop                 ebx
            //   c3                   | ret                 
            //   85db                 | test                ebx, ebx
            //   7405                 | je                  7
            //   83fb03               | cmp                 ebx, 3

        $sequence_4 = { 5b c3 83fb01 7405 83fb02 }
            // n = 5, score = 2500
            //   5b                   | pop                 ebx
            //   c3                   | ret                 
            //   83fb01               | cmp                 ebx, 1
            //   7405                 | je                  7
            //   83fb02               | cmp                 ebx, 2

        $sequence_5 = { 83f801 75f1 b900010000 e8???????? }
            // n = 4, score = 2500
            //   83f801               | cmp                 eax, 1
            //   75f1                 | jne                 0xfffffff3
            //   b900010000           | mov                 ecx, 0x100
            //   e8????????           |                     

        $sequence_6 = { e8???????? 8bf8 83fb01 751d 85ff 755d }
            // n = 6, score = 2500
            //   e8????????           |                     
            //   8bf8                 | mov                 edi, eax
            //   83fb01               | cmp                 ebx, 1
            //   751d                 | jne                 0x1f
            //   85ff                 | test                edi, edi
            //   755d                 | jne                 0x5f

        $sequence_7 = { 85db 7514 391d???????? 754d 33c0 }
            // n = 5, score = 2500
            //   85db                 | test                ebx, ebx
            //   7514                 | jne                 0x16
            //   391d????????         |                     
            //   754d                 | jne                 0x4f
            //   33c0                 | xor                 eax, eax

        $sequence_8 = { 85c0 a3???????? 7504 33c0 eb68 832000 }
            // n = 6, score = 2500
            //   85c0                 | test                eax, eax
            //   a3????????           |                     
            //   7504                 | jne                 6
            //   33c0                 | xor                 eax, eax
            //   eb68                 | jmp                 0x6a
            //   832000               | and                 dword ptr [eax], 0

        $sequence_9 = { e8???????? 85c0 750e 33ff 8bc7 }
            // n = 5, score = 2500
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   750e                 | jne                 0x10
            //   33ff                 | xor                 edi, edi
            //   8bc7                 | mov                 eax, edi

        $sequence_10 = { 85c0 750e 3905???????? 7e2c ff0d???????? }
            // n = 5, score = 2500
            //   85c0                 | test                eax, eax
            //   750e                 | jne                 0x10
            //   3905????????         |                     
            //   7e2c                 | jle                 0x2e
            //   ff0d????????         |                     

        $sequence_11 = { 757f 8b05???????? 85c0 0f8e8c000000 83e801 8905???????? }
            // n = 6, score = 2500
            //   757f                 | jne                 0x81
            //   8b05????????         |                     
            //   85c0                 | test                eax, eax
            //   0f8e8c000000         | jle                 0x92
            //   83e801               | sub                 eax, 1
            //   8905????????         |                     

        $sequence_12 = { ff25???????? 53 56 57 8bd9 33f6 53 }
            // n = 7, score = 2500
            //   ff25????????         |                     
            //   53                   | push                ebx
            //   56                   | push                esi
            //   57                   | push                edi
            //   8bd9                 | mov                 ebx, ecx
            //   33f6                 | xor                 esi, esi
            //   53                   | push                ebx

        $sequence_13 = { 807dff0a 7436 ff4df8 6a02 53 ff75f8 57 }
            // n = 7, score = 1900
            //   807dff0a             | cmp                 byte ptr [ebp - 1], 0xa
            //   7436                 | je                  0x38
            //   ff4df8               | dec                 dword ptr [ebp - 8]
            //   6a02                 | push                2
            //   53                   | push                ebx
            //   ff75f8               | push                dword ptr [ebp - 8]
            //   57                   | push                edi

        $sequence_14 = { 8945f8 8b450c 8945f4 8d45f0 50 ff7508 }
            // n = 6, score = 1900
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   8945f4               | mov                 dword ptr [ebp - 0xc], eax
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   ff7508               | push                dword ptr [ebp + 8]

        $sequence_15 = { 8bfb 8a1401 3217 47 8810 }
            // n = 5, score = 1900
            //   8bfb                 | mov                 edi, ebx
            //   8a1401               | mov                 dl, byte ptr [ecx + eax]
            //   3217                 | xor                 dl, byte ptr [edi]
            //   47                   | inc                 edi
            //   8810                 | mov                 byte ptr [eax], dl

        $sequence_16 = { 8bec 83ec20 56 8b7508 ff750c }
            // n = 5, score = 1900
            //   8bec                 | mov                 ebp, esp
            //   83ec20               | sub                 esp, 0x20
            //   56                   | push                esi
            //   8b7508               | mov                 esi, dword ptr [ebp + 8]
            //   ff750c               | push                dword ptr [ebp + 0xc]

        $sequence_17 = { eb11 8b03 85c0 7e0b 213b }
            // n = 5, score = 1200
            //   eb11                 | jmp                 0x13
            //   8b03                 | mov                 eax, dword ptr [ebx]
            //   85c0                 | test                eax, eax
            //   7e0b                 | jle                 0xd
            //   213b                 | and                 dword ptr [ebx], edi

        $sequence_18 = { 5e 5d c3 8bc5 ebe4 }
            // n = 5, score = 1200
            //   5e                   | pop                 esi
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   8bc5                 | mov                 eax, ebp
            //   ebe4                 | jmp                 0xffffffe6

        $sequence_19 = { b801000000 f00fc105???????? 83c001 83f801 }
            // n = 4, score = 1200
            //   b801000000           | mov                 eax, 1
            //   f00fc105????????     |                     
            //   83c001               | add                 eax, 1
            //   83f801               | cmp                 eax, 1

        $sequence_20 = { 85ff 7406 83430401 eb04 }
            // n = 4, score = 1200
            //   85ff                 | test                edi, edi
            //   7406                 | je                  8
            //   83430401             | add                 dword ptr [ebx + 4], 1
            //   eb04                 | jmp                 6

        $sequence_21 = { 8d7701 ff15???????? 8b4304 217b08 }
            // n = 4, score = 1200
            //   8d7701               | lea                 esi, [edi + 1]
            //   ff15????????         |                     
            //   8b4304               | mov                 eax, dword ptr [ebx + 4]
            //   217b08               | and                 dword ptr [ebx + 8], edi

        $sequence_22 = { 894c2450 740f 034810 894c2450 }
            // n = 4, score = 1200
            //   894c2450             | mov                 dword ptr [esp + 0x50], ecx
            //   740f                 | je                  0x11
            //   034810               | add                 ecx, dword ptr [eax + 0x10]
            //   894c2450             | mov                 dword ptr [esp + 0x50], ecx

        $sequence_23 = { 85c0 7f07 e8???????? eb26 }
            // n = 4, score = 1200
            //   85c0                 | test                eax, eax
            //   7f07                 | jg                  9
            //   e8????????           |                     
            //   eb26                 | jmp                 0x28

        $sequence_24 = { e8???????? eb6d e8???????? 85c0 7564 }
            // n = 5, score = 1200
            //   e8????????           |                     
            //   eb6d                 | jmp                 0x6f
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   7564                 | jne                 0x66

        $sequence_25 = { 83781400 750a b865005921 e9???????? }
            // n = 4, score = 900
            //   83781400             | pop                 esi
            //   750a                 | pop                 ebx
            //   b865005921           | ret                 
            //   e9????????           |                     

        $sequence_26 = { ff15???????? 83f87a 740b 3d230000c0 }
            // n = 4, score = 800
            //   ff15????????         |                     
            //   83f87a               | cmp                 eax, 0x7a
            //   740b                 | je                  0xd
            //   3d230000c0           | cmp                 eax, 0xc0000023

        $sequence_27 = { 51 e8???????? 33c0 83c43c }
            // n = 4, score = 800
            //   51                   | push                ecx
            //   e8????????           |                     
            //   33c0                 | xor                 eax, eax
            //   83c43c               | add                 esp, 0x3c

        $sequence_28 = { 6689440ffc 6685c0 75ee f685c003000010 }
            // n = 4, score = 800
            //   6689440ffc           | mov                 word ptr [edi + ecx - 4], ax
            //   6685c0               | test                ax, ax
            //   75ee                 | jne                 0xfffffff0
            //   f685c003000010       | test                byte ptr [ebp + 0x3c0], 0x10

        $sequence_29 = { 68???????? 51 ffd6 83c40c 6a28 }
            // n = 5, score = 800
            //   68????????           |                     
            //   51                   | push                ecx
            //   ffd6                 | call                esi
            //   83c40c               | add                 esp, 0xc
            //   6a28                 | push                0x28

        $sequence_30 = { 53 56 33db 57 6808020000 }
            // n = 5, score = 800
            //   53                   | push                ebx
            //   56                   | push                esi
            //   33db                 | xor                 ebx, ebx
            //   57                   | push                edi
            //   6808020000           | push                0x208

        $sequence_31 = { 663bcb 75f4 8b0d???????? 8b15???????? 8908 8b0d???????? }
            // n = 6, score = 800
            //   663bcb               | cmp                 cx, bx
            //   75f4                 | jne                 0xfffffff6
            //   8b0d????????         |                     
            //   8b15????????         |                     
            //   8908                 | mov                 dword ptr [eax], ecx
            //   8b0d????????         |                     

        $sequence_32 = { 51 6a00 6a00 56 ff15???????? 56 8bf8 }
            // n = 7, score = 800
            //   51                   | push                ecx
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   56                   | push                esi
            //   ff15????????         |                     
            //   56                   | push                esi
            //   8bf8                 | mov                 edi, eax

        $sequence_33 = { 5d c3 8b4d08 57 51 6a00 6a00 }
            // n = 7, score = 800
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
            //   57                   | push                edi
            //   51                   | push                ecx
            //   6a00                 | push                0
            //   6a00                 | push                0

        $sequence_34 = { 83c002 663bcb 75f4 8b15???????? 8b0d???????? 8910 }
            // n = 6, score = 800
            //   83c002               | add                 eax, 2
            //   663bcb               | cmp                 cx, bx
            //   75f4                 | jne                 0xfffffff6
            //   8b15????????         |                     
            //   8b0d????????         |                     
            //   8910                 | mov                 dword ptr [eax], edx

        $sequence_35 = { 6a18 8d45e8 50 6a00 6aff e8???????? 85c0 }
            // n = 7, score = 800
            //   6a18                 | test                ebx, ebx
            //   8d45e8               | je                  7
            //   50                   | cmp                 ebx, 3
            //   6a00                 | pop                 ebx
            //   6aff                 | ret                 
            //   e8????????           |                     
            //   85c0                 | test                ebx, ebx

        $sequence_36 = { 6a03 68000000c0 50 ff15???????? 8bf0 83feff 7505 }
            // n = 7, score = 800
            //   6a03                 | push                3
            //   68000000c0           | push                0xc0000000
            //   50                   | push                eax
            //   ff15????????         |                     
            //   8bf0                 | mov                 esi, eax
            //   83feff               | cmp                 esi, -1
            //   7505                 | jne                 7

        $sequence_37 = { 488bf8 4883f8ff 741e 4c8d8dd4030000 4533c0 33d2 }
            // n = 6, score = 700
            //   488bf8               | mov                 dword ptr [edi - 2], eax
            //   4883f8ff             | test                ax, ax
            //   741e                 | jne                 0xffffffe9
            //   4c8d8dd4030000       | xor                 eax, eax
            //   4533c0               | dec                 eax
            //   33d2                 | or                  ecx, 0xffffffff

        $sequence_38 = { 4533c0 33d2 488bc8 ff15???????? 488bcf ff15???????? 41b701 }
            // n = 7, score = 700
            //   4533c0               | dec                 eax
            //   33d2                 | add                 esp, 0xd48
            //   488bc8               | dec                 ecx
            //   ff15????????         |                     
            //   488bcf               | mov                 ecx, esp
            //   ff15????????         |                     
            //   41b701               | dec                 eax

        $sequence_39 = { 7418 4584ff 7518 33c0 4881c4480d0000 }
            // n = 5, score = 700
            //   7418                 | dec                 ecx
            //   4584ff               | mov                 ecx, ebp
            //   7518                 | dec                 esp
            //   33c0                 | mov                 ebp, dword ptr [esp + 0xd40]
            //   4881c4480d0000       | dec                 eax

        $sequence_40 = { 83f812 410f44c4 448be0 498bcd ff15???????? }
            // n = 5, score = 700
            //   83f812               | cmp                 eax, 0x12
            //   410f44c4             | inc                 ecx
            //   448be0               | cmove               eax, esp
            //   498bcd               | inc                 esp
            //   ff15????????         |                     

        $sequence_41 = { 488b05???????? 498bcc 488947fe 8b05???????? }
            // n = 4, score = 700
            //   488b05????????       |                     
            //   498bcc               | mov                 edi, dword ptr [esp + 0xd88]
            //   488947fe             | dec                 eax
            //   8b05????????         |                     

        $sequence_42 = { 6685c0 75e7 33c0 4883c9ff 488dbdb0010000 66f2af }
            // n = 6, score = 700
            //   6685c0               | test                ebx, ebx
            //   75e7                 | je                  0x1a
            //   33c0                 | inc                 ebp
            //   4883c9ff             | test                bh, bh
            //   488dbdb0010000       | jne                 0x1d
            //   66f2af               | xor                 eax, eax

        $sequence_43 = { 7507 32c0 e9???????? c745b818000000 }
            // n = 4, score = 600
            //   7507                 | push                -1
            //   32c0                 | test                eax, eax
            //   e9????????           |                     
            //   c745b818000000       | je                  9

        $sequence_44 = { c3 668cc8 c3 53 50 }
            // n = 5, score = 200
            //   c3                   | push                0
            //   668cc8               | push                -1
            //   c3                   | test                eax, eax
            //   53                   | je                  0xd
            //   50                   | lea                 eax, [ebp - 0x18]

        $sequence_45 = { 85c0 740a b8050000c0 e9???????? }
            // n = 4, score = 200
            //   85c0                 | push                eax
            //   740a                 | push                0
            //   b8050000c0           | push                -1
            //   e9????????           |                     

        $sequence_46 = { 68???????? e8???????? 6880000000 6a00 68???????? e8???????? 83c40c }
            // n = 7, score = 100
            //   68????????           |                     
            //   e8????????           |                     
            //   6880000000           | push                ecx
            //   6a00                 | ret                 
            //   68????????           |                     
            //   e8????????           |                     
            //   83c40c               | mov                 ax, cs

        $sequence_47 = { 83ea24 8955d8 8b45d8 c7401c00000000 }
            // n = 4, score = 100
            //   83ea24               | push                eax
            //   8955d8               | xor                 esi, esi
            //   8b45d8               | add                 eax, edx
            //   c7401c00000000       | adc                 ecx, esi

    condition:
        7 of them and filesize < 1368064
}rule win_cobra_w0 {
    meta:
        author = "ESET Research"
        source = "https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/#_footnote_2"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cobra"
        malpedia_version = "20170512"
        malpedia_sharing = "TLP:WHITE"
        malpedia_license = ""

    strings:
        $s1 = "ModStart"
        $s2 = "ModuleStart"
        $t1 = "STOP|OK"
        $t2 = "STOP|KILL"

    condition:
        (uint16(0) == 0x5a4d) and (1 of ($s*)) and (1 of ($t*))
}
import "pe"

rule win_cobra_w1 {
    meta:
        author = "ESET Research"
        source = "https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/#_footnote_2"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cobra"
        malpedia_version = "20170512"
        malpedia_sharing = "TLP:WHITE"
        malpedia_license = ""

    condition:
        (pe.version_info["InternalName"] contains "SERVICE.EXE" or
        pe.version_info["InternalName"] contains "MSIMGHLP.DLL" or
        pe.version_info["InternalName"] contains "MSXIML.DLL")
        and pe.version_info["CompanyName"] contains "Microsoft Corporation"
}
rule win_crutch_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.crutch"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 0f8588000000 8b7c2424 8b0f 51 ff15???????? 8b542414 83c404 }
            // n = 7, score = 100
            //   0f8588000000         | jne                 0x8e
            //   8b7c2424             | mov                 edi, dword ptr [esp + 0x24]
            //   8b0f                 | mov                 ecx, dword ptr [edi]
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   8b542414             | mov                 edx, dword ptr [esp + 0x14]
            //   83c404               | add                 esp, 4

        $sequence_1 = { 742f 8b742420 6a02 6a02 56 e8???????? 8b96d0050000 }
            // n = 7, score = 100
            //   742f                 | je                  0x31
            //   8b742420             | mov                 esi, dword ptr [esp + 0x20]
            //   6a02                 | push                2
            //   6a02                 | push                2
            //   56                   | push                esi
            //   e8????????           |                     
            //   8b96d0050000         | mov                 edx, dword ptr [esi + 0x5d0]

        $sequence_2 = { 57 e8???????? 83c41c 83bff803000000 7516 85f6 0f8493000000 }
            // n = 7, score = 100
            //   57                   | push                edi
            //   e8????????           |                     
            //   83c41c               | add                 esp, 0x1c
            //   83bff803000000       | cmp                 dword ptr [edi + 0x3f8], 0
            //   7516                 | jne                 0x18
            //   85f6                 | test                esi, esi
            //   0f8493000000         | je                  0x99

        $sequence_3 = { 52 89442428 e8???????? 83c410 837e6c00 740b 6a03 }
            // n = 7, score = 100
            //   52                   | push                edx
            //   89442428             | mov                 dword ptr [esp + 0x28], eax
            //   e8????????           |                     
            //   83c410               | add                 esp, 0x10
            //   837e6c00             | cmp                 dword ptr [esi + 0x6c], 0
            //   740b                 | je                  0xd
            //   6a03                 | push                3

        $sequence_4 = { 8b542414 85d2 0f8edc000000 8b8ee04a0000 8b86e44a0000 8bd9 0bd8 }
            // n = 7, score = 100
            //   8b542414             | mov                 edx, dword ptr [esp + 0x14]
            //   85d2                 | test                edx, edx
            //   0f8edc000000         | jle                 0xe2
            //   8b8ee04a0000         | mov                 ecx, dword ptr [esi + 0x4ae0]
            //   8b86e44a0000         | mov                 eax, dword ptr [esi + 0x4ae4]
            //   8bd9                 | mov                 ebx, ecx
            //   0bd8                 | or                  ebx, eax

        $sequence_5 = { 83c418 894500 3bc3 0f856f010000 68???????? 33ed 57 }
            // n = 7, score = 100
            //   83c418               | add                 esp, 0x18
            //   894500               | mov                 dword ptr [ebp], eax
            //   3bc3                 | cmp                 eax, ebx
            //   0f856f010000         | jne                 0x175
            //   68????????           |                     
            //   33ed                 | xor                 ebp, ebp
            //   57                   | push                edi

        $sequence_6 = { 8974240c 85f6 7507 5f 5e 5b 83c408 }
            // n = 7, score = 100
            //   8974240c             | mov                 dword ptr [esp + 0xc], esi
            //   85f6                 | test                esi, esi
            //   7507                 | jne                 9
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   5b                   | pop                 ebx
            //   83c408               | add                 esp, 8

        $sequence_7 = { 83c414 5f 5e b81b000000 5b 83c448 c3 }
            // n = 7, score = 100
            //   83c414               | add                 esp, 0x14
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   b81b000000           | mov                 eax, 0x1b
            //   5b                   | pop                 ebx
            //   83c448               | add                 esp, 0x48
            //   c3                   | ret                 

        $sequence_8 = { 59 c3 8b8dec4b0000 8b442410 893c99 5f 5e }
            // n = 7, score = 100
            //   59                   | pop                 ecx
            //   c3                   | ret                 
            //   8b8dec4b0000         | mov                 ecx, dword ptr [ebp + 0x4bec]
            //   8b442410             | mov                 eax, dword ptr [esp + 0x10]
            //   893c99               | mov                 dword ptr [ecx + ebx*4], edi
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

        $sequence_9 = { 80e215 55 8b6c2414 80fa01 750e 8b914c030000 b801000000 }
            // n = 7, score = 100
            //   80e215               | and                 dl, 0x15
            //   55                   | push                ebp
            //   8b6c2414             | mov                 ebp, dword ptr [esp + 0x14]
            //   80fa01               | cmp                 dl, 1
            //   750e                 | jne                 0x10
            //   8b914c030000         | mov                 edx, dword ptr [ecx + 0x34c]
            //   b801000000           | mov                 eax, 1

    condition:
        7 of them and filesize < 1067008
}rule win_gazer_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.gazer"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 85c0 7511 e8???????? 84c0 7508 83c8ff }
            // n = 6, score = 300
            //   85c0                 | push                eax
            //   7511                 | push                esi
            //   e8????????           |                     
            //   84c0                 | lea                 eax, [esi + 0xa0]
            //   7508                 | push                eax
            //   83c8ff               | push                esi

        $sequence_1 = { 7511 e8???????? 84c0 7508 }
            // n = 4, score = 300
            //   7511                 | push                0x13b
            //   e8????????           |                     
            //   84c0                 | push                0x10036f38
            //   7508                 | push                ebx

        $sequence_2 = { 85c0 7511 e8???????? 84c0 }
            // n = 4, score = 300
            //   85c0                 | je                  0x1ab9
            //   7511                 | dec                 ecx
            //   e8????????           |                     
            //   84c0                 | mov                 ecx, dword ptr [esp]

        $sequence_3 = { ff15???????? 85c0 7511 e8???????? 84c0 }
            // n = 5, score = 300
            //   ff15????????         |                     
            //   85c0                 | push                eax
            //   7511                 | mov                 eax, dword ptr [ebp - 0x10]
            //   e8????????           |                     
            //   84c0                 | pop                 ecx

        $sequence_4 = { ff15???????? 85c0 7511 e8???????? 84c0 7508 }
            // n = 6, score = 300
            //   ff15????????         |                     
            //   85c0                 | push                0x571
            //   7511                 | push                esi
            //   e8????????           |                     
            //   84c0                 | mov                 dword ptr [ebp - 0x10], edi
            //   7508                 | jmp                 0xd59

        $sequence_5 = { 85c0 7511 e8???????? 84c0 7508 }
            // n = 5, score = 300
            //   85c0                 | mov                 ebp, ecx
            //   7511                 | dec                 eax
            //   e8????????           |                     
            //   84c0                 | mov                 ecx, dword ptr [ecx + 0xb0]
            //   7508                 | dec                 ecx

        $sequence_6 = { 7511 e8???????? 84c0 7508 83c8ff e9???????? }
            // n = 6, score = 300
            //   7511                 | jne                 0x1f7f
            //   e8????????           |                     
            //   84c0                 | lea                 eax, [esp + 0x18]
            //   7508                 | lea                 edx, [esp + 0x30]
            //   83c8ff               | lea                 eax, [esi + 0x1a]
            //   e9????????           |                     

        $sequence_7 = { 7511 e8???????? 84c0 7508 83c8ff }
            // n = 5, score = 300
            //   7511                 | lea                 eax, [0x1b410]
            //   e8????????           |                     
            //   84c0                 | dec                 eax
            //   7508                 | lea                 ecx, [0x23481]
            //   83c8ff               | mov                 edx, 0x15

        $sequence_8 = { 85c0 7511 e8???????? 84c0 7508 83c8ff e9???????? }
            // n = 7, score = 300
            //   85c0                 | mov                 dword ptr [ebp + 0x50], edi
            //   7511                 | dec                 esp
            //   e8????????           |                     
            //   84c0                 | mov                 dword ptr [ebp + 0x60], edi
            //   7508                 | call                dword ptr [eax + 0xc8]
            //   83c8ff               | inc                 ebp
            //   e9????????           |                     

        $sequence_9 = { ff15???????? 85c0 7511 e8???????? 84c0 7508 83c8ff }
            // n = 7, score = 300
            //   ff15????????         |                     
            //   85c0                 | mov                 eax, dword ptr [eax]
            //   7511                 | pop                 ecx
            //   e8????????           |                     
            //   84c0                 | mov                 ecx, dword ptr [edi]
            //   7508                 | mov                 dword ptr [eax], eax
            //   83c8ff               | mov                 dword ptr [eax + 4], eax

    condition:
        7 of them and filesize < 950272
}// For feedback or questions contact us at: github@eset.com
// https://github.com/eset/malware-ioc/
//
// These yara rules are provided to the community under the two-clause BSD
// license as follows:
//
// Copyright (c) 2017, ESET
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import "pe"

rule win_gazer_w0 {
    meta:
        author      = "ESET Research"
        date        = "2017-08-30"
        info        = "certificate subject"
        description = "Turla Gazer malware"
        reference = "https://www.welivesecurity.com/2017/08/30/eset-research-cyberespionage-gazer/"
        source = "https://github.com/eset/malware-ioc/"
        contact = "github@eset.com"
        license = "BSD 2-Clause"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.gazer"
        malpedia_version = "20170831"
        malpedia_license = "BSD 2-Clause"
        malpedia_sharing = "TLP:WHITE"

    condition:
        for any i in (0..pe.number_of_signatures - 1):
            (pe.signatures[i].subject contains "Solid Loop" or pe.signatures[i].subject contains "Ultimate Computer Support")
}
//
// Copyright (c) 2017, ESET
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

rule win_gazer_w1 {
    meta:
        author      = "ESET Research"
        date        = "2017-08-30"
        info        = "logfile name"
        description = "Turla Gazer malware"
        reference = "https://www.welivesecurity.com/2017/08/30/eset-research-cyberespionage-gazer/"
        source = "https://github.com/eset/malware-ioc/"
        contact = "github@eset.com"
        license = "BSD 2-Clause"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.gazer"
        malpedia_version = "20170831"
        malpedia_license = "BSD 2-Clause"
        malpedia_sharing = "TLP:WHITE"

    strings:
        $s1 = "CVRG72B5.tmp.cvr"
        $s2 = "CVRG1A6B.tmp.cvr"
        $s3 = "CVRG38D9.tmp.cvr"

    condition:
        1 of them
}
//
// Copyright (c) 2017, ESET
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

rule win_gazer_w2 {
    meta:
        author      = "ESET Research"
        date        = "2017-08-30"
        info        = "certificate"
        description = "Turla Gazer malware"
        reference = "https://www.welivesecurity.com/2017/08/30/eset-research-cyberespionage-gazer/"
        source = "https://github.com/eset/malware-ioc/"
        contact = "github@eset.com"
        license = "BSD 2-Clause"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.gazer"
        malpedia_version = "20170831"
        malpedia_license = "BSD 2-Clause"
        malpedia_sharing = "TLP:WHITE"

    strings:
        $certif1 = {52 76 a4 53 cd 70 9c 18 da 65 15 7e 5f 1f de 02}
        $certif2 = {12 90 f2 41 d9 b2 80 af 77 fc da 12 c6 b4 96 9c}

    condition:
        1 of them and filesize < 2MB
}
rule win_kazuar_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-10-14"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.5.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.kazuar"
        malpedia_rule_date = "20201014"
        malpedia_hash = "a7e3bd57eaf12bf3ea29a863c041091ba3af9ac9"
        malpedia_version = "20201014"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { af 0015???????? 0915???????? 1115???????? }
            // n = 4, score = 100
            //   af                   | scasd               eax, dword ptr es:[edi]
            //   0015????????         |                     
            //   0915????????         |                     
            //   1115????????         |                     

        $sequence_1 = { 054905eaa6 57 022400 8ea7d2082400 3e000a }
            // n = 5, score = 100
            //   054905eaa6           | add                 eax, 0xa6ea0549
            //   57                   | push                edi
            //   022400               | add                 ah, byte ptr [eax + eax]
            //   8ea7d2082400         | mov                 fs, word ptr [edi + 0x2408d2]
            //   3e000a               | add                 byte ptr ds:[edx], cl

        $sequence_2 = { 00ec ae a6 054905eaa6 57 }
            // n = 5, score = 100
            //   00ec                 | add                 ah, ch
            //   ae                   | scasb               al, byte ptr es:[edi]
            //   a6                   | cmpsb               byte ptr [esi], byte ptr es:[edi]
            //   054905eaa6           | add                 eax, 0xa6ea0549
            //   57                   | push                edi

        $sequence_3 = { 10b90351a7da 10c9 0369a7 e110 }
            // n = 4, score = 100
            //   10b90351a7da         | adc                 byte ptr [ecx - 0x2558aefd], bh
            //   10c9                 | adc                 cl, cl
            //   0369a7               | add                 ebp, dword ptr [ecx - 0x59]
            //   e110                 | loope               0x12

        $sequence_4 = { 41 0429 aa 7011 39043c aa 7611 }
            // n = 7, score = 100
            //   41                   | inc                 ecx
            //   0429                 | add                 al, 0x29
            //   aa                   | stosb               byte ptr es:[edi], al
            //   7011                 | jo                  0x13
            //   39043c               | cmp                 dword ptr [esp + edi], eax
            //   aa                   | stosb               byte ptr es:[edi], al
            //   7611                 | jbe                 0x13

        $sequence_5 = { 02b90372a557 02b903fea857 02b9030ea9be 08b9031ea91a 11b90341a920 }
            // n = 5, score = 100
            //   02b90372a557         | add                 bh, byte ptr [ecx + 0x57a57203]
            //   02b903fea857         | add                 bh, byte ptr [ecx + 0x57a8fe03]
            //   02b9030ea9be         | add                 bh, byte ptr [ecx - 0x4156f1fd]
            //   08b9031ea91a         | or                  byte ptr [ecx + 0x1aa91e03], bh
            //   11b90341a920         | adc                 dword ptr [ecx + 0x20a94103], edi

        $sequence_6 = { 72a5 57 0299007ba5f1 0f6103 3e006003 }
            // n = 5, score = 100
            //   72a5                 | jb                  0xffffffa7
            //   57                   | push                edi
            //   0299007ba5f1         | add                 bl, byte ptr [ecx - 0xe5a8500]
            //   0f6103               | punpcklwd           mm0, qword ptr [ebx]
            //   3e006003             | add                 byte ptr ds:[eax + 3], ah

        $sequence_7 = { a9be08e903 8ea7d208e103 08a626113104 7ea8 0011 b903aba92d }
            // n = 6, score = 100
            //   a9be08e903           | test                eax, 0x3e908be
            //   8ea7d208e103         | mov                 fs, word ptr [edi + 0x3e108d2]
            //   08a626113104         | or                  byte ptr [esi + 0x4311126], ah
            //   7ea8                 | jle                 0xffffffaa
            //   0011                 | add                 byte ptr [ecx], dl
            //   b903aba92d           | mov                 ecx, 0x2da9ab03

        $sequence_8 = { 02ad470ad904 3e00b200d10402 ad 0b1451 0152a1 }
            // n = 5, score = 100
            //   02ad470ad904         | add                 ch, byte ptr [ebp + 0x4d90a47]
            //   3e00b200d10402       | add                 byte ptr ds:[edx + 0x204d100], dh
            //   ad                   | lodsd               eax, dword ptr [esi]
            //   0b1451               | or                  edx, dword ptr [ecx + edx*2]
            //   0152a1               | add                 dword ptr [edx - 0x5f], edx

        $sequence_9 = { 12a900feab2b 1029 0267ab c01271 001a ac d208 }
            // n = 7, score = 100
            //   12a900feab2b         | adc                 ch, byte ptr [ecx + 0x2babfe00]
            //   1029                 | adc                 byte ptr [ecx], ch
            //   0267ab               | add                 ah, byte ptr [edi - 0x55]
            //   c01271               | rcl                 byte ptr [edx], 0x71
            //   001a                 | add                 byte ptr [edx], bl
            //   ac                   | lodsb               al, byte ptr [esi]
            //   d208                 | ror                 byte ptr [eax], cl

    condition:
        7 of them and filesize < 516096
}rule win_ksl0t_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ksl0t"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e9???????? 488b05???????? 4839442460 0f8428040000 488b442460 488905???????? 488d8c2480080000 }
            // n = 7, score = 200
            //   e9????????           |                     
            //   488b05????????       |                     
            //   4839442460           | mov                 byte ptr [esp + 0xa6], 0x38
            //   0f8428040000         | dec                 eax
            //   488b442460           | cmp                 dword ptr [esp + 0x60], eax
            //   488905????????       |                     
            //   488d8c2480080000     | je                  0x42e

        $sequence_1 = { c68424a10000003c c68424a200000039 c68424a300000030 c68424a400000001 c68424a50000003c c68424a600000038 }
            // n = 6, score = 200
            //   c68424a10000003c     | lea                 edx, [0xc67d]
            //   c68424a200000039     | mov                 byte ptr [esp + 0xa1], 0x3c
            //   c68424a300000030     | mov                 byte ptr [esp + 0xa2], 0x39
            //   c68424a400000001     | mov                 byte ptr [esp + 0xa3], 0x30
            //   c68424a50000003c     | mov                 byte ptr [esp + 0xa4], 1
            //   c68424a600000038     | mov                 byte ptr [esp + 0xa5], 0x3c

        $sequence_2 = { 8d44241c 50 55 ffd7 8d4c242c 8bd8 }
            // n = 6, score = 200
            //   8d44241c             | nop                 
            //   50                   | push                0x1c
            //   55                   | push                edi
            //   ffd7                 | add                 esp, 0xc
            //   8d4c242c             | mov                 esi, 0x1c
            //   8bd8                 | mov                 dword ptr [ebp - 0x1c], esi

        $sequence_3 = { ff15???????? 85c0 0f853c010000 8b8424f4080000 488b4c2448 }
            // n = 5, score = 200
            //   ff15????????         |                     
            //   85c0                 | mov                 byte ptr [esp + 0x6b], 6
            //   0f853c010000         | movzx               eax, byte ptr [ecx + eax + 0x387c]
            //   8b8424f4080000       | mov                 eax, dword ptr [ecx + eax*4 + 0x37a0]
            //   488b4c2448           | dec                 eax

        $sequence_4 = { 0fb684017c380000 8b8481a0370000 4803c1 ffe0 }
            // n = 4, score = 200
            //   0fb684017c380000     | lea                 ecx, [esp + 0x8b0]
            //   8b8481a0370000       | dec                 esp
            //   4803c1               | mov                 eax, eax
            //   ffe0                 | mov                 byte ptr [esp + 0x23f], 2

        $sequence_5 = { 88842499000000 88842482000000 c68424c900000031 c68424ca00000039 }
            // n = 4, score = 200
            //   88842499000000       | mov                 ecx, dword ptr [esp + 0x48]
            //   88842482000000       | jne                 0xb
            //   c68424c900000031     | dec                 eax
            //   c68424ca00000039     | lea                 ecx, [0x45e2]

        $sequence_6 = { 6a1c 68???????? 57 ff15???????? 83c40c be1c000000 8975e4 }
            // n = 7, score = 200
            //   6a1c                 | call                edi
            //   68????????           |                     
            //   57                   | lea                 ecx, [esp + 0x110]
            //   ff15????????         |                     
            //   83c40c               | push                ecx
            //   be1c000000           | push                ebx
            //   8975e4               | mov                 ecx, 0x3f

        $sequence_7 = { c684243f02000002 c684244002000055 c644246812 c644246930 c644246a21 c644246b06 }
            // n = 6, score = 200
            //   c684243f02000002     | mov                 eax, dword ptr [esp + 0x14b4]
            //   c684244002000055     | dec                 eax
            //   c644246812           | lea                 edx, [0xcaff]
            //   c644246930           | dec                 eax
            //   c644246a21           | lea                 ecx, [esp + 0x8b0]
            //   c644246b06           | dec                 eax

        $sequence_8 = { 448b8424b4140000 488d15ffca0000 488d8c24b0080000 ff15???????? 488d8c24b0080000 ff15???????? 4c8bc0 }
            // n = 7, score = 200
            //   448b8424b4140000     | dec                 eax
            //   488d15ffca0000       | mov                 eax, dword ptr [esp + 0x60]
            //   488d8c24b0080000     | dec                 eax
            //   ff15????????         |                     
            //   488d8c24b0080000     | lea                 ecx, [esp + 0x880]
            //   ff15????????         |                     
            //   4c8bc0               | inc                 esp

        $sequence_9 = { 8d8c2410010000 51 53 894674 ffd7 894678 8d942428030000 }
            // n = 7, score = 200
            //   8d8c2410010000       | xor                 eax, eax
            //   51                   | mov                 ecx, 0x3fe
            //   53                   | rep stosb           byte ptr es:[edi], al
            //   894674               | test                eax, eax
            //   ffd7                 | jne                 0x144
            //   894678               | mov                 eax, dword ptr [esp + 0x8f4]
            //   8d942428030000       | dec                 eax

        $sequence_10 = { b93f000000 bf???????? bb???????? bd???????? b8???????? }
            // n = 5, score = 200
            //   b93f000000           | lea                 edx, [esp + 0x328]
            //   bf????????           |                     
            //   bb????????           |                     
            //   bd????????           |                     
            //   b8????????           |                     

        $sequence_11 = { ff15???????? 3bc7 7534 ff15???????? }
            // n = 4, score = 200
            //   ff15????????         |                     
            //   3bc7                 | mov                 byte ptr [esp + 0x99], al
            //   7534                 | mov                 byte ptr [esp + 0x82], al
            //   ff15????????         |                     

        $sequence_12 = { ff15???????? c705????????01000000 eb28 488d157dc60000 }
            // n = 4, score = 200
            //   ff15????????         |                     
            //   c705????????01000000     |     
            //   eb28                 | jmp                 0x2a
            //   488d157dc60000       | dec                 eax

        $sequence_13 = { 72f3 33c0 90 308c0480000000 }
            // n = 4, score = 200
            //   72f3                 | jmp                 4
            //   33c0                 | xor                 ecx, ecx
            //   90                   | lea                 ecx, [esp + 0x110]
            //   308c0480000000       | push                ecx

        $sequence_14 = { 488dbc24a2100000 33c0 b9fe030000 f3aa }
            // n = 4, score = 200
            //   488dbc24a2100000     | mov                 byte ptr [esp + 0x240], 0x55
            //   33c0                 | mov                 byte ptr [esp + 0x68], 0x12
            //   b9fe030000           | mov                 byte ptr [esp + 0x69], 0x30
            //   f3aa                 | mov                 byte ptr [esp + 0x6a], 0x21

        $sequence_15 = { 88942429010000 8894242a010000 c684242b0100003e c684242c01000010 c684242d0100002d 888c242e010000 c68424cc01000006 }
            // n = 7, score = 200
            //   88942429010000       | cmp                 eax, edi
            //   8894242a010000       | jne                 0x38
            //   c684242b0100003e     | xor                 byte ptr [esp + eax + 0x17c], cl
            //   c684242c01000010     | inc                 eax
            //   c684242d0100002d     | cmp                 eax, 0x11
            //   888c242e010000       | jb                  0xfffffff8
            //   c68424cc01000006     | xor                 eax, eax

    condition:
        7 of them and filesize < 196608
}rule win_lightneuron_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.lightneuron"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 488bf7 492bd0 6690 0129 33c0 3929 0f92c0 }
            // n = 7, score = 100
            //   488bf7               | dec                 eax
            //   492bd0               | lea                 ecx, [esp + 0x30]
            //   6690                 | dec                 eax
            //   0129                 | lea                 ecx, [esp + 0x50]
            //   33c0                 | inc                 esp
            //   3929                 | mov                 ecx, ebx
            //   0f92c0               | dec                 eax

        $sequence_1 = { 03d0 69d2ff000000 2bca 4863c1 400fb6cd 440fb69c0400010000 4103c8 }
            // n = 7, score = 100
            //   03d0                 | lea                 edx, [0x3330c]
            //   69d2ff000000         | dec                 esp
            //   2bca                 | lea                 ecx, [0x332f6]
            //   4863c1               | inc                 ecx
            //   400fb6cd             | mov                 ecx, 1
            //   440fb69c0400010000     | dec    eax
            //   4103c8               | arpl                ax, cx

        $sequence_2 = { 85c0 7515 4c8d87e0000000 488bd6 488bcf e8???????? }
            // n = 6, score = 100
            //   85c0                 | xor                 eax, eax
            //   7515                 | cmp                 dword ptr [ecx], ebp
            //   4c8d87e0000000       | setb                al
            //   488bd6               | dec                 eax
            //   488bcf               | inc                 esi
            //   e8????????           |                     

        $sequence_3 = { 488bcb 480f45d0 e8???????? 488bcf e8???????? 418b8e28010000 }
            // n = 6, score = 100
            //   488bcb               | movsx               eax, al
            //   480f45d0             | movzx               eax, byte ptr [eax + ebp]
            //   e8????????           |                     
            //   488bcf               | ja                  0x1949
            //   e8????????           |                     
            //   418b8e28010000       | movzx               eax, al

        $sequence_4 = { 49ffc3 d3e8 4883eb01 41884101 75d5 33c0 488b5c2430 }
            // n = 7, score = 100
            //   49ffc3               | mov                 ebp, eax
            //   d3e8                 | dec                 eax
            //   4883eb01             | test                eax, eax
            //   41884101             | je                  0x76f
            //   75d5                 | dec                 eax
            //   33c0                 | lea                 edx, [0x23226]
            //   488b5c2430           | dec                 eax

        $sequence_5 = { e8???????? 488bcf e8???????? 418b8e28010000 4c8bf8 e8???????? 498d8e08010000 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   488bcf               | mov                 esi, dword ptr [esp + 0x58]
            //   e8????????           |                     
            //   418b8e28010000       | dec                 eax
            //   4c8bf8               | add                 esp, 0x40
            //   e8????????           |                     
            //   498d8e08010000       | pop                 edi

        $sequence_6 = { 488d4c2430 e8???????? 85c0 7814 488d4c2430 e8???????? b880bfffff }
            // n = 7, score = 100
            //   488d4c2430           | lea                 eax, [esp + 0x190]
            //   e8????????           |                     
            //   85c0                 | dec                 eax
            //   7814                 | lea                 edx, [0x16304]
            //   488d4c2430           | dec                 eax
            //   e8????????           |                     
            //   b880bfffff           | lea                 ecx, [esp + 0x98]

        $sequence_7 = { 488d4e01 c6441c2000 e8???????? 488d4c2420 8bd8 e8???????? 85db }
            // n = 7, score = 100
            //   488d4e01             | dec                 eax
            //   c6441c2000           | lea                 edx, [esp + 0xc0]
            //   e8????????           |                     
            //   488d4c2420           | dec                 eax
            //   8bd8                 | lea                 ecx, [esp + 0xc0]
            //   e8????????           |                     
            //   85db                 | mov                 ebx, eax

        $sequence_8 = { 4533c0 b900001000 48896c2428 89442420 e8???????? 488bce ff15???????? }
            // n = 7, score = 100
            //   4533c0               | cmovne              edx, eax
            //   b900001000           | dec                 eax
            //   48896c2428           | mov                 ecx, ebx
            //   89442420             | dec                 eax
            //   e8????????           |                     
            //   488bce               | test                eax, eax
            //   ff15????????         |                     

        $sequence_9 = { 45894304 448b4b08 4183d200 450fb7c1 41c1e910 418bd1 418bc8 }
            // n = 7, score = 100
            //   45894304             | dec                 eax
            //   448b4b08             | test                ecx, ecx
            //   4183d200             | je                  0x69e
            //   450fb7c1             | dec                 eax
            //   41c1e910             | mov                 eax, dword ptr [edx + 0x10]
            //   418bd1               | dec                 eax
            //   418bc8               | lea                 edx, [eax + ecx*4 - 4]

    condition:
        7 of them and filesize < 573440
}rule win_mosquito_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mosquito"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { f7d8 1bc0 83e0b4 83c04c }
            // n = 4, score = 400
            //   f7d8                 | neg                 eax
            //   1bc0                 | sbb                 eax, eax
            //   83e0b4               | and                 eax, 0xffffffb4
            //   83c04c               | add                 eax, 0x4c

        $sequence_1 = { 8bfc f3a5 ff942464020000 81c450020000 }
            // n = 4, score = 400
            //   8bfc                 | mov                 edi, esp
            //   f3a5                 | rep movsd           dword ptr es:[edi], dword ptr [esi]
            //   ff942464020000       | call                dword ptr [esp + 0x264]
            //   81c450020000         | add                 esp, 0x250

        $sequence_2 = { 99 52 50 6a00 6801c1fd7d }
            // n = 5, score = 400
            //   99                   | cdq                 
            //   52                   | push                edx
            //   50                   | push                eax
            //   6a00                 | push                0
            //   6801c1fd7d           | push                0x7dfdc101

        $sequence_3 = { e8???????? 6a20 e8???????? 83c40c }
            // n = 4, score = 300
            //   e8????????           |                     
            //   6a20                 | push                0x20
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc

        $sequence_4 = { 50 c7450826000000 e8???????? 8bcb c700???????? 8d4508 }
            // n = 6, score = 300
            //   50                   | push                eax
            //   c7450826000000       | mov                 dword ptr [ebp + 8], 0x26
            //   e8????????           |                     
            //   8bcb                 | mov                 ecx, ebx
            //   c700????????         |                     
            //   8d4508               | lea                 eax, [ebp + 8]

        $sequence_5 = { 8bfc f3a5 ff942460020000 81c450020000 }
            // n = 4, score = 300
            //   8bfc                 | mov                 edi, esp
            //   f3a5                 | rep movsd           dword ptr es:[edi], dword ptr [esi]
            //   ff942460020000       | call                dword ptr [esp + 0x260]
            //   81c450020000         | add                 esp, 0x250

        $sequence_6 = { e8???????? 6a20 8bf0 e8???????? 8bc8 }
            // n = 5, score = 300
            //   e8????????           |                     
            //   6a20                 | push                0x20
            //   8bf0                 | mov                 esi, eax
            //   e8????????           |                     
            //   8bc8                 | mov                 ecx, eax

        $sequence_7 = { ff5004 85c0 7508 c7060b000000 }
            // n = 4, score = 300
            //   ff5004               | call                dword ptr [eax + 4]
            //   85c0                 | test                eax, eax
            //   7508                 | jne                 0xa
            //   c7060b000000         | mov                 dword ptr [esi], 0xb

        $sequence_8 = { 8b01 ff5018 85c0 750d 8b434a 6a6e 8b4004 }
            // n = 7, score = 300
            //   8b01                 | mov                 eax, dword ptr [ecx]
            //   ff5018               | call                dword ptr [eax + 0x18]
            //   85c0                 | test                eax, eax
            //   750d                 | jne                 0xf
            //   8b434a               | mov                 eax, dword ptr [ebx + 0x4a]
            //   6a6e                 | push                0x6e
            //   8b4004               | mov                 eax, dword ptr [eax + 4]

        $sequence_9 = { 53 8b5d08 56 57 8bf9 c70306000000 897df4 }
            // n = 7, score = 300
            //   53                   | push                ebx
            //   8b5d08               | mov                 ebx, dword ptr [ebp + 8]
            //   56                   | push                esi
            //   57                   | push                edi
            //   8bf9                 | mov                 edi, ecx
            //   c70306000000         | mov                 dword ptr [ebx], 6
            //   897df4               | mov                 dword ptr [ebp - 0xc], edi

        $sequence_10 = { 891e 8d442418 50 8d84246c020000 50 ff15???????? }
            // n = 6, score = 300
            //   891e                 | mov                 dword ptr [esi], ebx
            //   8d442418             | lea                 eax, [esp + 0x18]
            //   50                   | push                eax
            //   8d84246c020000       | lea                 eax, [esp + 0x26c]
            //   50                   | push                eax
            //   ff15????????         |                     

        $sequence_11 = { 64a300000000 8b7d08 c745fc00000000 8b7710 85f6 7429 }
            // n = 6, score = 200
            //   64a300000000         | mov                 dword ptr fs:[0], eax
            //   8b7d08               | mov                 edi, dword ptr [ebp + 8]
            //   c745fc00000000       | mov                 dword ptr [ebp - 4], 0
            //   8b7710               | mov                 esi, dword ptr [edi + 0x10]
            //   85f6                 | test                esi, esi
            //   7429                 | je                  0x2b

        $sequence_12 = { a1???????? 49 8bf0 028b7000108b a0???????? 7500 ff00 }
            // n = 7, score = 200
            //   a1????????           |                     
            //   49                   | dec                 ecx
            //   8bf0                 | mov                 esi, eax
            //   028b7000108b         | add                 cl, byte ptr [ebx - 0x74efff90]
            //   a0????????           |                     
            //   7500                 | jne                 2
            //   ff00                 | inc                 dword ptr [eax]

        $sequence_13 = { 64a300000000 8b7d08 b801000000 894704 }
            // n = 4, score = 200
            //   64a300000000         | mov                 dword ptr fs:[0], eax
            //   8b7d08               | mov                 edi, dword ptr [ebp + 8]
            //   b801000000           | mov                 eax, 1
            //   894704               | mov                 dword ptr [edi + 4], eax

        $sequence_14 = { 89747230 018b54a300ff ff05???????? 0115???????? e5a0 }
            // n = 5, score = 200
            //   89747230             | mov                 dword ptr [edx + esi*2 + 0x30], esi
            //   018b54a300ff         | add                 dword ptr [ebx - 0xff5cac], ecx
            //   ff05????????         |                     
            //   0115????????         |                     
            //   e5a0                 | in                  eax, 0xa0

        $sequence_15 = { 53 006800 8b02 53 56 5b 8bc7 }
            // n = 7, score = 200
            //   53                   | push                ebx
            //   006800               | add                 byte ptr [eax], ch
            //   8b02                 | mov                 eax, dword ptr [edx]
            //   53                   | push                ebx
            //   56                   | push                esi
            //   5b                   | pop                 ebx
            //   8bc7                 | mov                 eax, edi

        $sequence_16 = { 56 ff15???????? 8903 83f8ff }
            // n = 4, score = 200
            //   56                   | push                esi
            //   ff15????????         |                     
            //   8903                 | mov                 dword ptr [ebx], eax
            //   83f8ff               | cmp                 eax, -1

        $sequence_17 = { 51 ffd3 8b5510 c745fcffffffff 8b7d0c 83c404 }
            // n = 6, score = 200
            //   51                   | push                ecx
            //   ffd3                 | call                ebx
            //   8b5510               | mov                 edx, dword ptr [ebp + 0x10]
            //   c745fcffffffff       | mov                 dword ptr [ebp - 4], 0xffffffff
            //   8b7d0c               | mov                 edi, dword ptr [ebp + 0xc]
            //   83c404               | add                 esp, 4

        $sequence_18 = { 8bc3 e8???????? 8b4304 50 ffd7 83c404 }
            // n = 6, score = 200
            //   8bc3                 | mov                 eax, ebx
            //   e8????????           |                     
            //   8b4304               | mov                 eax, dword ptr [ebx + 4]
            //   50                   | push                eax
            //   ffd7                 | call                edi
            //   83c404               | add                 esp, 4

        $sequence_19 = { 008be5430089 0d74008b10 8bce 00755b }
            // n = 4, score = 200
            //   008be5430089         | add                 byte ptr [ebx - 0x76ffbc1b], cl
            //   0d74008b10           | or                  eax, 0x108b0074
            //   8bce                 | mov                 ecx, esi
            //   00755b               | add                 byte ptr [ebp + 0x5b], dh

        $sequence_20 = { 6824080000 50 e8???????? 83c410 }
            // n = 4, score = 200
            //   6824080000           | push                0x824
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c410               | add                 esp, 0x10

    condition:
        7 of them and filesize < 1015808
}import "pe"

rule win_mosquito_w0 {
    meta:
        description = "Detects malware sample from Turla Mosquito report"
        author = "Florian Roth"
        reference = "https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mosquito"
        malpedia_version = "20180301"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $s1 = ".?AVFileNameParseException@ExecuteFile@@" fullword ascii
        $s3 = "no_address" fullword wide
        $s6 = "SRRRQP" fullword ascii
        $s7 = "QWVPQQ" fullword ascii
    condition:
        pe.imphash() == "cd918073f209c5da7a16b6c125d73746" or all of them
}
rule win_mosquito_w1 {
    meta:
        description = "Detects malware sample from Turla Mosquito report"
        author = "Florian Roth"
        reference = "https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mosquito"
        malpedia_version = "20180301"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $a1 = "/scripts/m/query.php?id=" fullword wide
        $a2 = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36" fullword wide
        $a3 = "GetUserNameW fails" fullword wide

        $s1 = "QVSWQQ" fullword ascii
        $s2 = "SRRRQP" fullword ascii
        $s3 = "QSVVQQ" fullword ascii
    condition:
        2 of ($a*) or 4 of them
}
import "pe"

rule win_mosquito_w2 {
    meta:
        description = "Detects malware sample from Turla Mosquito report"
        author = "Florian Roth"
        reference = "https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mosquito"
        malpedia_version = "20180301"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $x1 = "Logger32.dll" fullword ascii
        $s6 = "lManager::Execute : CPalExceptio" fullword wide
        $s19 = "CCommandSender::operator(" fullword wide
    condition:
        pe.imphash() == "073235ae6dfbb1bf5db68a039a7b7726" or 2 of them
}
rule win_nautilus_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.nautilus"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e9???????? 4883c302 493bde 0f8420020000 498bf6 482bf3 0fb603 }
            // n = 7, score = 100
            //   e9????????           |                     
            //   4883c302             | je                  0x8ad
            //   493bde               | dec                 esp
            //   0f8420020000         | mov                 esi, dword ptr [esp + 0x68]
            //   498bf6               | dec                 ecx
            //   482bf3               | mov                 edi, eax
            //   0fb603               | dec                 esp

        $sequence_1 = { ffc0 83f832 0f8538080000 4963d3 410fb70c54 8bc1 4803c0 }
            // n = 7, score = 100
            //   ffc0                 | jmp                 0x1139
            //   83f832               | dec                 ecx
            //   0f8538080000         | mov                 ecx, esp
            //   4963d3               | dec                 esp
            //   410fb70c54           | lea                 eax, [esp + 0x30]
            //   8bc1                 | dec                 esp
            //   4803c0               | mov                 esp, esi

        $sequence_2 = { 8bd6 488bcb 448bc0 e8???????? 4863f8 83fe03 7421 }
            // n = 7, score = 100
            //   8bd6                 | dec                 eax
            //   488bcb               | mov                 edx, edi
            //   448bc0               | dec                 eax
            //   e8????????           |                     
            //   4863f8               | mov                 ebp, ecx
            //   83fe03               | dec                 eax
            //   7421                 | lea                 ecx, [eax - 0x68]

        $sequence_3 = { 894308 8b4308 3dff000000 7e6e 488bd3 488bcf e8???????? }
            // n = 7, score = 100
            //   894308               | dec                 eax
            //   8b4308               | lea                 edx, [esp + 0x40]
            //   3dff000000           | inc                 ecx
            //   7e6e                 | mov                 eax, 0x400
            //   488bd3               | test                eax, eax
            //   488bcf               | dec                 eax
            //   e8????????           |                     

        $sequence_4 = { 488bd0 e8???????? 488bc8 4885c0 7509 c7432807000000 eb69 }
            // n = 7, score = 100
            //   488bd0               | dec                 eax
            //   e8????????           |                     
            //   488bc8               | add                 ecx, esi
            //   4885c0               | test                al, al
            //   7509                 | inc                 ecx
            //   c7432807000000       | mov                 dword ptr [eax + 4], esi
            //   eb69                 | setb                al

        $sequence_5 = { e8???????? 488b4f08 4c8d05ce680500 488d151bdb0500 458bcf e8???????? 488b4f08 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   488b4f08             | dec                 eax
            //   4c8d05ce680500       | mov                 dword ptr [edx + 8], eax
            //   488d151bdb0500       | jmp                 0x58f
            //   458bcf               | dec                 eax
            //   e8????????           |                     
            //   488b4f08             | mov                 ecx, dword ptr [ecx + 0x40]

        $sequence_6 = { f20f1116 f20f115630 c7463803000000 e9???????? c1ef17 85ff 740d }
            // n = 7, score = 100
            //   f20f1116             | inc                 ecx
            //   f20f115630           | mov                 dword ptr [esp], ebx
            //   c7463803000000       | inc                 ecx
            //   e9????????           |                     
            //   c1ef17               | mov                 esi, ecx
            //   85ff                 | dec                 esp
            //   740d                 | mov                 esp, dword ptr [ebp + 0x100]

        $sequence_7 = { 744c 488b8580000000 4885c0 7403 832000 4d8bc6 488bd3 }
            // n = 7, score = 100
            //   744c                 | dec                 eax
            //   488b8580000000       | mov                 dword ptr [esp + 0x18], esi
            //   4885c0               | push                edi
            //   7403                 | dec                 eax
            //   832000               | sub                 esp, 0x20
            //   4d8bc6               | dec                 eax
            //   488bd3               | mov                 esi, ecx

        $sequence_8 = { 83ff20 7c10 488b4920 488d155fc20100 e8???????? 488d4703 4c8bcf }
            // n = 7, score = 100
            //   83ff20               | cmp                 eax, 1
            //   7c10                 | jl                  0x2e7
            //   488b4920             | dec                 eax
            //   488d155fc20100       | mov                 eax, edx
            //   e8????????           |                     
            //   488d4703             | dec                 eax
            //   4c8bcf               | add                 esp, 0x28

        $sequence_9 = { 85c0 7421 4c8d4708 488d55cf 488d4dcf e8???????? 8bd8 }
            // n = 7, score = 100
            //   85c0                 | mov                 dword ptr [esp + 0x20], esi
            //   7421                 | dec                 eax
            //   4c8d4708             | mov                 ecx, dword ptr [esp + 0x48]
            //   488d55cf             | inc                 esp
            //   488d4dcf             | mov                 edi, eax
            //   e8????????           |                     
            //   8bd8                 | dec                 eax

    condition:
        7 of them and filesize < 1302528
}rule win_nautilus_w0 {
    meta:
        description = "Rule for detection of Nautilus based on assembly code for a modified RC4 loop"
        author = "NCSC UK"
        hash = "a415ab193f6cd832a0de4fcc48d5f53d6f0b06d5e13b3c359878c6c31f3e7ec3"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.nautilus"
        malpedia_version = "20180226"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $rc4_loop = {42 0F B6 14 04 41 FF C0 03 D7 0F B6 CA 8A 14 0C 43 32 14 13 41 88 12 49 FF C2
        49 FF C9}
        $rc4_key = {31 42 31 34 34 30 44 39 30 46 43 39 42 43 42 34 36 41 39 41 43 39 36 34 33 38
        46 45 45 41 38 42}
        $string_0 = "nautilus-service.dll" ascii
        $string_1 = "oxygen.dll" ascii
        $string_2 = "config_listen.system" ascii
        $string_3 = "ctx.system" ascii
        $string_4 = "3FDA3998-BEF5-426D-82D8-1A71F29ADDC3" ascii
        $string_5 = "C:\\ProgramData\\Microsoft\\Windows\\Caches\\{%s}.2.ver0x0000000000000001.db"
    condition:
        ($rc4_loop and $rc4_key) or (all of ($string_*)) 
}
rule win_neuron_w0 {
    meta:
        description = "Rule for detection of Neuron based on commonly used strings"
        author = "NCSC UK"
        hash = "d1d7a96fcadc137e80ad866c838502713db9cdfe59939342b8e3beacf9c7fe29"
        source = "https://www.ncsc.gov.uk/alerts/turla-group-malware"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.neuron"
        malpedia_version = "20171123"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $strServiceName = "MSExchangeService" ascii
        $strReqParameter_1 = "cadataKey" wide
        $strReqParameter_2 = "cid" wide
        $strReqParameter_3 = "cadata" wide
        $strReqParameter_4 = "cadataSig" wide
        $strEmbeddedKey = "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnZ3WXRKcnNRZjVTcCtWVG9Rb2xuaEVkMHVwWDFrVElFTUNTNEFnRkRCclNmclpKS0owN3BYYjh2b2FxdUtseXF2RzBJcHV0YXhDMVRYazRoeFNrdEpzbHljU3RFaHBUc1l4OVBEcURabVVZVklVb        HlwSFN1K3ljWUJWVFdubTZmN0JTNW1pYnM0UWhMZElRbnl1ajFMQyt6TUhwZ0xmdEc2b1d5b0hyd1ZNaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+" wide
        $strDefaultKey = "8d963325-01b8-4671-8e82-d0904275ab06" wide
        $strIdentifier = "MSXEWS" wide
        $strListenEndpoint = "443/ews/exchange/" wide
        $strB64RegKeySubstring = "U09GVFdBUkVcTWljcm9zb2Z0XENyeXB0b2dyYXBo" wide
        $strName = "neuron_service" ascii
    condition:
        6 of ($str*)
}
rule win_neuron_w1 {
    meta:
        description = "Rule for detection of Neuron based on a standalone signature from .NET metadata"
        author = "NCSC UK"
        hash = "d1d7a96fcadc137e80ad866c838502713db9cdfe59939342b8e3beacf9c7fe29"
        source = "https://www.ncsc.gov.uk/alerts/turla-group-malware"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.neuron"
        malpedia_version = "20171123"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $a = {eb073d151231011234080e12818d1d051281311d1281211d1281211d128121081d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281211d1281}
        $dotnetMagic = "BSJB" ascii
    condition:
        all of them
}
rule win_neuron_w2 {
    meta:
        description = "Rule for detection of Neuron based on .NET function, variable and class names"
        author = "NCSC UK"
        hash = "d1d7a96fcadc137e80ad866c838502713db9cdfe59939342b8e3beacf9c7fe29"
        source = "https://www.ncsc.gov.uk/alerts/turla-group-malware"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.neuron"
        malpedia_version = "20171123"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    strings:
        $class1 = "StorageUtils" ascii
        $class2 = "WebServer" ascii
        $class3 = "StorageFile" ascii
        $class4 = "StorageScript" ascii
        $class5 = "ServerConfig" ascii
        $class6 = "CommandScript" ascii
        $class7 = "MSExchangeService" ascii
    condition:
        all of them
}
rule win_newpass_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.newpass"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 448b4304 4903fe 4903d5 488bcf e8???????? 897bfc }
            // n = 6, score = 500
            //   448b4304             | mov                 ecx, 0x7c
            //   4903fe               | jmp                 0x1ea8
            //   4903d5               | dec                 eax
            //   488bcf               | lea                 eax, [0x6c605]
            //   e8????????           |                     
            //   897bfc               | cmp                 byte ptr [eax], 0

        $sequence_1 = { 4c8bd9 440fb608 4c8d5001 4c8912 4180f961 7577 410fb602 }
            // n = 7, score = 500
            //   4c8bd9               | lea                 ecx, [ebp - 0x50]
            //   440fb608             | mov                 esi, 0x1f
            //   4c8d5001             | dec                 eax
            //   4c8912               | lea                 edx, [ebp - 0x50]
            //   4180f961             | dec                 eax
            //   7577                 | lea                 ecx, [esp + 0x38]
            //   410fb602             | dec                 eax

        $sequence_2 = { 498bf8 4c8bf2 488bd9 4d85c0 7459 4c8b4118 4983f808 }
            // n = 7, score = 500
            //   498bf8               | dec                 eax
            //   4c8bf2               | lea                 edx, [0x641df]
            //   488bd9               | mov                 ecx, 0x92
            //   4d85c0               | jmp                 0x849
            //   7459                 | dec                 eax
            //   4c8b4118             | lea                 eax, [0x641cc]
            //   4983f808             | dec                 eax

        $sequence_3 = { 488d15394c0800 b91e000000 e8???????? eb07 488d05264c0800 48c745880f000000 48897580 }
            // n = 7, score = 500
            //   488d15394c0800       | dec                 eax
            //   b91e000000           | lea                 eax, [ecx + 1]
            //   e8????????           |                     
            //   eb07                 | dec                 eax
            //   488d05264c0800       | mov                 dword ptr [ebx + 0x18], eax
            //   48c745880f000000     | mov                 byte ptr [ecx], 0x5c
            //   48897580             | dec                 eax

        $sequence_4 = { 483bde 75a7 49ffcf 4883ee20 4d85ff 7f8b 4c8b742420 }
            // n = 7, score = 500
            //   483bde               | mov                 ecx, dword ptr [ebx]
            //   75a7                 | dec                 eax
            //   49ffcf               | test                ecx, ecx
            //   4883ee20             | je                  0x1d09
            //   4d85ff               | dec                 eax
            //   7f8b                 | mov                 eax, dword ptr [ecx + 0x38]
            //   4c8b742420           | inc                 esp

        $sequence_5 = { c744243003000000 488d5580 488bce e8???????? 488bd0 488d4de0 e8???????? }
            // n = 7, score = 500
            //   c744243003000000     | je                  0x1a03
            //   488d5580             | cmp                 dword ptr [esp + 0x30], 0
            //   488bce               | jne                 0x1a03
            //   e8????????           |                     
            //   488bd0               | je                  0x1a01
            //   488d4de0             | or                  dword ptr [esi], 1
            //   e8????????           |                     

        $sequence_6 = { 837e3000 0f8534010000 0fb603 3c30 7c25 ebc3 488bc3 }
            // n = 7, score = 500
            //   837e3000             | dec                 eax
            //   0f8534010000         | lea                 ecx, [ebx - 0x7fffffff]
            //   0fb603               | mov                 ebx, eax
            //   3c30                 | dec                 esp
            //   7c25                 | lea                 eax, [ebp + 0x50]
            //   ebc3                 | dec                 eax
            //   488bc3               | mov                 edx, eax

        $sequence_7 = { 488bd0 488d4c2440 e8???????? 488d4c2440 e8???????? 803d????????00 7513 }
            // n = 7, score = 500
            //   488bd0               | mov                 eax, dword ptr [ecx]
            //   488d4c2440           | call                dword ptr [eax + 0x10]
            //   e8????????           |                     
            //   488d4c2440           | xor                 al, al
            //   e8????????           |                     
            //   803d????????00       |                     
            //   7513                 | dec                 eax

        $sequence_8 = { 488bd0 488d8db0000000 e8???????? 4c8bd8 bf03000000 897c2430 4883781808 }
            // n = 7, score = 500
            //   488bd0               | mov                 byte ptr [ebp + 0x50], 0
            //   488d8db0000000       | dec                 eax
            //   e8????????           |                     
            //   4c8bd8               | cmp                 dword ptr [ebp + 0x88], 0x10
            //   bf03000000           | dec                 eax
            //   897c2430             | mov                 ecx, dword ptr [ebp + 0x58]
            //   4883781808           | dec                 eax

        $sequence_9 = { 488d5518 488d8d98000000 e8???????? 90 488bc8 e8???????? 488bd0 }
            // n = 7, score = 500
            //   488d5518             | and                 dword ptr [ebp + 0x30], 0xffff7fff
            //   488d8d98000000       | dec                 eax
            //   e8????????           |                     
            //   90                   | lea                 ecx, [ebp + 0x118]
            //   488bc8               | dec                 eax
            //   e8????????           |                     
            //   488bd0               | mov                 ebp, edx

    condition:
        7 of them and filesize < 1286144
}rule win_outlook_backdoor_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.outlook_backdoor"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 2bd1 50 8955e4 894de0 e8???????? 85c0 7404 }
            // n = 7, score = 600
            //   2bd1                 | sub                 edx, ecx
            //   50                   | push                eax
            //   8955e4               | mov                 dword ptr [ebp - 0x1c], edx
            //   894de0               | mov                 dword ptr [ebp - 0x20], ecx
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   7404                 | je                  6

        $sequence_1 = { eb02 33f6 834dfcff 85c0 7406 }
            // n = 5, score = 600
            //   eb02                 | jmp                 4
            //   33f6                 | xor                 esi, esi
            //   834dfcff             | or                  dword ptr [ebp - 4], 0xffffffff
            //   85c0                 | test                eax, eax
            //   7406                 | je                  8

        $sequence_2 = { e8???????? 59 8bc6 5e c20400 8325????????00 53 }
            // n = 7, score = 600
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   8bc6                 | mov                 eax, esi
            //   5e                   | pop                 esi
            //   c20400               | ret                 4
            //   8325????????00       |                     
            //   53                   | push                ebx

        $sequence_3 = { ff742420 ff15???????? 8bf0 e8???????? 8b35???????? 8d442418 50 }
            // n = 7, score = 600
            //   ff742420             | push                dword ptr [esp + 0x20]
            //   ff15????????         |                     
            //   8bf0                 | mov                 esi, eax
            //   e8????????           |                     
            //   8b35????????         |                     
            //   8d442418             | lea                 eax, [esp + 0x18]
            //   50                   | push                eax

        $sequence_4 = { ff5038 8bf0 e8???????? 680201ff0f 8bc3 e8???????? 8b4df4 }
            // n = 7, score = 600
            //   ff5038               | call                dword ptr [eax + 0x38]
            //   8bf0                 | mov                 esi, eax
            //   e8????????           |                     
            //   680201ff0f           | push                0xfff0102
            //   8bc3                 | mov                 eax, ebx
            //   e8????????           |                     
            //   8b4df4               | mov                 ecx, dword ptr [ebp - 0xc]

        $sequence_5 = { 7604 2bc1 8bf0 85d2 7416 85f6 7412 }
            // n = 7, score = 600
            //   7604                 | jbe                 6
            //   2bc1                 | sub                 eax, ecx
            //   8bf0                 | mov                 esi, eax
            //   85d2                 | test                edx, edx
            //   7416                 | je                  0x18
            //   85f6                 | test                esi, esi
            //   7412                 | je                  0x14

        $sequence_6 = { 50 8d442424 e8???????? c68424ac00000001 }
            // n = 4, score = 600
            //   50                   | push                eax
            //   8d442424             | lea                 eax, [esp + 0x24]
            //   e8????????           |                     
            //   c68424ac00000001     | mov                 byte ptr [esp + 0xac], 1

        $sequence_7 = { 3b4510 7333 8b4718 8d4f04 83f810 7204 }
            // n = 6, score = 600
            //   3b4510               | cmp                 eax, dword ptr [ebp + 0x10]
            //   7333                 | jae                 0x35
            //   8b4718               | mov                 eax, dword ptr [edi + 0x18]
            //   8d4f04               | lea                 ecx, [edi + 4]
            //   83f810               | cmp                 eax, 0x10
            //   7204                 | jb                  6

        $sequence_8 = { e9???????? 56 6a01 8d4c2434 e8???????? 56 6a01 }
            // n = 7, score = 600
            //   e9????????           |                     
            //   56                   | push                esi
            //   6a01                 | push                1
            //   8d4c2434             | lea                 ecx, [esp + 0x34]
            //   e8????????           |                     
            //   56                   | push                esi
            //   6a01                 | push                1

        $sequence_9 = { e9???????? ff75f0 e8???????? c3 8b45f0 83c018 e9???????? }
            // n = 7, score = 600
            //   e9????????           |                     
            //   ff75f0               | push                dword ptr [ebp - 0x10]
            //   e8????????           |                     
            //   c3                   | ret                 
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]
            //   83c018               | add                 eax, 0x18
            //   e9????????           |                     

    condition:
        7 of them and filesize < 2912256
}rule win_powershellrunner_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.powershellrunner"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 4883ec28 488b442430 488b4c2438 488b09 488908 488b4c2430 e8???????? }
            // n = 7, score = 200
            //   4883ec28             | mov                 eax, 1
            //   488b442430           | jmp                 0x2018
            //   488b4c2438           | mov                 ecx, 0xd
            //   488b09               | mov                 word ptr [esp + 0x88], ax
            //   488908               | mov                 word ptr [ebx], cx
            //   488b4c2430           | inc                 ebp
            //   e8????????           |                     

        $sequence_1 = { 48894c2408 4883ec38 488b442448 48ffc8 48d1f8 4889442420 }
            // n = 6, score = 200
            //   48894c2408           | dec                 ebp
            //   4883ec38             | lea                 eax, [esi + 1]
            //   488b442448           | cmp                 al, 0xd
            //   48ffc8               | je                  0x27c
            //   48d1f8               | mov                 byte ptr [ebx], al
            //   4889442420           | cmp                 al, 0x46

        $sequence_2 = { 480f45d9 e9???????? 488d45d7 4889442438 4c897c2430 89742428 }
            // n = 6, score = 200
            //   480f45d9             | mov                 ebp, esp
            //   e9????????           |                     
            //   488d45d7             | dec                 ecx
            //   4889442438           | shr                 eax, 1
            //   4c897c2430           | inc                 eax
            //   89742428             | cmp                 byte ptr [esp + 0x48], dh

        $sequence_3 = { 895108 488d05d84c0100 488901 488bd9 4c894110 48c7411800000000 4d85c0 }
            // n = 7, score = 200
            //   895108               | dec                 eax
            //   488d05d84c0100       | lea                 edi, [0x18d19]
            //   488901               | jmp                 0x3d7
            //   488bd9               | dec                 eax
            //   4c894110             | lea                 edi, [0x18d20]
            //   48c7411800000000     | jmp                 0x3d7
            //   4d85c0               | dec                 eax

        $sequence_4 = { 488d542420 488d4c2460 e8???????? 0fb6c0 85c0 7415 488b4c2438 }
            // n = 7, score = 200
            //   488d542420           | mov                 ecx, 0xe
            //   488d4c2460           | dec                 eax
            //   e8????????           |                     
            //   0fb6c0               | mov                 dword ptr [esp + 0x30], eax
            //   85c0                 | dec                 eax
            //   7415                 | mov                 esi, dword ptr [edx]
            //   488b4c2438           | dec                 ecx

        $sequence_5 = { ff15???????? 4889442420 48837c242000 7513 4533c9 4533c0 }
            // n = 6, score = 200
            //   ff15????????         |                     
            //   4889442420           | dec                 eax
            //   48837c242000         | lea                 ecx, [esp + 0x50]
            //   7513                 | mov                 eax, 0x63
            //   4533c9               | mov                 word ptr [esp + 0x194], ax
            //   4533c0               | mov                 eax, 0x2e

        $sequence_6 = { 48ffc8 48d1f8 4889442420 eb10 488b442448 48ffc8 48d1f8 }
            // n = 7, score = 200
            //   48ffc8               | mov                 dword ptr [esp + 0x10], edx
            //   48d1f8               | dec                 eax
            //   4889442420           | mov                 dword ptr [esp + 8], ecx
            //   eb10                 | dec                 eax
            //   488b442448           | sub                 esp, 0x38
            //   48ffc8               | dec                 eax
            //   48d1f8               | mov                 eax, dword ptr [esp + 0x48]

        $sequence_7 = { c684240d01000013 c684240e0100003c c684240f01000039 c684241001000030 c684241101000055 c684243802000012 c684243902000030 }
            // n = 7, score = 200
            //   c684240d01000013     | mov                 word ptr [esp + 0x1b2], ax
            //   c684240e0100003c     | mov                 eax, 0x4e
            //   c684240f01000039     | mov                 word ptr [esp + 0x110], ax
            //   c684241001000030     | mov                 word ptr [esp + 0xb0], ax
            //   c684241101000055     | mov                 eax, 0x5c
            //   c684243802000012     | mov                 word ptr [esp + 0xb2], ax
            //   c684243902000030     | mov                 eax, 0x53

        $sequence_8 = { 83e03f 2bc8 48d3cf 4933fa 4b87bcfef0140300 33c0 488b5c2450 }
            // n = 7, score = 200
            //   83e03f               | mov                 dword ptr [esp + 0x30], edi
            //   2bc8                 | inc                 esp
            //   48d3cf               | mov                 dword ptr [esp + 0x28], esi
            //   4933fa               | dec                 eax
            //   4b87bcfef0140300     | mov                 dword ptr [esp + 0x20], esi
            //   33c0                 | dec                 eax
            //   488b5c2450           | mov                 esi, eax

        $sequence_9 = { 8d040e 488d8d24030000 898520030000 e8???????? 488d0d9944feff 48c1e602 }
            // n = 6, score = 200
            //   8d040e               | lea                 edx, [esp + 0x30]
            //   488d8d24030000       | call                dword ptr [esp + 0x28]
            //   898520030000         | dec                 eax
            //   e8????????           |                     
            //   488d0d9944feff       | mov                 ecx, dword ptr [esp + 0x80]
            //   48c1e602             | dec                 eax

    condition:
        7 of them and filesize < 458752
}rule win_satellite_turla_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.satellite_turla"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8d94240c010000 89867c010000 52 ff15???????? 898684010000 }
            // n = 5, score = 200
            //   8d94240c010000       | lea                 edx, [esp + 0x10c]
            //   89867c010000         | mov                 dword ptr [esi + 0x17c], eax
            //   52                   | push                edx
            //   ff15????????         |                     
            //   898684010000         | mov                 dword ptr [esi + 0x184], eax

        $sequence_1 = { 33f6 a801 750e 8d4900 }
            // n = 4, score = 200
            //   33f6                 | xor                 esi, esi
            //   a801                 | test                al, 1
            //   750e                 | jne                 0x10
            //   8d4900               | lea                 ecx, [ecx]

        $sequence_2 = { 33c0 e9???????? 8d8d64fdffff 51 }
            // n = 4, score = 200
            //   33c0                 | xor                 eax, eax
            //   e9????????           |                     
            //   8d8d64fdffff         | lea                 ecx, [ebp - 0x29c]
            //   51                   | push                ecx

        $sequence_3 = { 8d9574cdffff 52 8d85f4ccffff 50 8d8de0ccffff 51 8d95aeccffff }
            // n = 7, score = 200
            //   8d9574cdffff         | lea                 edx, [ebp - 0x328c]
            //   52                   | push                edx
            //   8d85f4ccffff         | lea                 eax, [ebp - 0x330c]
            //   50                   | push                eax
            //   8d8de0ccffff         | lea                 ecx, [ebp - 0x3320]
            //   51                   | push                ecx
            //   8d95aeccffff         | lea                 edx, [ebp - 0x3352]

        $sequence_4 = { 8b0d???????? e8???????? 8b958cf7ffff 52 8d45d4 }
            // n = 5, score = 200
            //   8b0d????????         |                     
            //   e8????????           |                     
            //   8b958cf7ffff         | mov                 edx, dword ptr [ebp - 0x874]
            //   52                   | push                edx
            //   8d45d4               | lea                 eax, [ebp - 0x2c]

        $sequence_5 = { 0f85ce000000 8bbd08c1ffff 3bfb 0f84b3000000 8d8508c1ffff 50 e8???????? }
            // n = 7, score = 200
            //   0f85ce000000         | jne                 0xd4
            //   8bbd08c1ffff         | mov                 edi, dword ptr [ebp - 0x3ef8]
            //   3bfb                 | cmp                 edi, ebx
            //   0f84b3000000         | je                  0xb9
            //   8d8508c1ffff         | lea                 eax, [ebp - 0x3ef8]
            //   50                   | push                eax
            //   e8????????           |                     

        $sequence_6 = { 8b54241c 8b442418 57 52 50 e8???????? }
            // n = 6, score = 200
            //   8b54241c             | mov                 edx, dword ptr [esp + 0x1c]
            //   8b442418             | mov                 eax, dword ptr [esp + 0x18]
            //   57                   | push                edi
            //   52                   | push                edx
            //   50                   | push                eax
            //   e8????????           |                     

        $sequence_7 = { c68548fdffff03 c68549fdffff03 c6854afdffff33 889d4bfdffff c6854cfdffff1f c6854dfdffff0a }
            // n = 6, score = 200
            //   c68548fdffff03       | mov                 byte ptr [ebp - 0x2b8], 3
            //   c68549fdffff03       | mov                 byte ptr [ebp - 0x2b7], 3
            //   c6854afdffff33       | mov                 byte ptr [ebp - 0x2b6], 0x33
            //   889d4bfdffff         | mov                 byte ptr [ebp - 0x2b5], bl
            //   c6854cfdffff1f       | mov                 byte ptr [ebp - 0x2b4], 0x1f
            //   c6854dfdffff0a       | mov                 byte ptr [ebp - 0x2b3], 0xa

        $sequence_8 = { 6a13 50 c6459438 c645950e c645961f }
            // n = 5, score = 100
            //   6a13                 | push                0x13
            //   50                   | push                eax
            //   c6459438             | mov                 byte ptr [ebp - 0x6c], 0x38
            //   c645950e             | mov                 byte ptr [ebp - 0x6b], 0xe
            //   c645961f             | mov                 byte ptr [ebp - 0x6a], 0x1f

        $sequence_9 = { 57 e8???????? ff15???????? 6a40 8bf0 33db }
            // n = 6, score = 100
            //   57                   | push                edi
            //   e8????????           |                     
            //   ff15????????         |                     
            //   6a40                 | push                0x40
            //   8bf0                 | mov                 esi, eax
            //   33db                 | xor                 ebx, ebx

        $sequence_10 = { 56 ff15???????? 56 56 bf???????? 53 57 }
            // n = 7, score = 100
            //   56                   | push                esi
            //   ff15????????         |                     
            //   56                   | push                esi
            //   56                   | push                esi
            //   bf????????           |                     
            //   53                   | push                ebx
            //   57                   | push                edi

        $sequence_11 = { c9 c21000 55 8bec 81ec94000000 53 }
            // n = 6, score = 100
            //   c9                   | leave               
            //   c21000               | ret                 0x10
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   81ec94000000         | sub                 esp, 0x94
            //   53                   | push                ebx

        $sequence_12 = { c645894c c6458a63 c6458b66 c6458c6f c6458d44 c6458e6b }
            // n = 6, score = 100
            //   c645894c             | mov                 byte ptr [ebp - 0x77], 0x4c
            //   c6458a63             | mov                 byte ptr [ebp - 0x76], 0x63
            //   c6458b66             | mov                 byte ptr [ebp - 0x75], 0x66
            //   c6458c6f             | mov                 byte ptr [ebp - 0x74], 0x6f
            //   c6458d44             | mov                 byte ptr [ebp - 0x73], 0x44
            //   c6458e6b             | mov                 byte ptr [ebp - 0x72], 0x6b

        $sequence_13 = { c6458f67 c645906f c645914b c645924b e8???????? 83c40c }
            // n = 6, score = 100
            //   c6458f67             | mov                 byte ptr [ebp - 0x71], 0x67
            //   c645906f             | mov                 byte ptr [ebp - 0x70], 0x6f
            //   c645914b             | mov                 byte ptr [ebp - 0x6f], 0x4b
            //   c645924b             | mov                 byte ptr [ebp - 0x6e], 0x4b
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc

        $sequence_14 = { 50 c645dc6b c645dd44 c645de47 c645df5b }
            // n = 5, score = 100
            //   50                   | push                eax
            //   c645dc6b             | mov                 byte ptr [ebp - 0x24], 0x6b
            //   c645dd44             | mov                 byte ptr [ebp - 0x23], 0x44
            //   c645de47             | mov                 byte ptr [ebp - 0x22], 0x47
            //   c645df5b             | mov                 byte ptr [ebp - 0x21], 0x5b

        $sequence_15 = { 8d45a8 885db7 50 57 }
            // n = 4, score = 100
            //   8d45a8               | lea                 eax, [ebp - 0x58]
            //   885db7               | mov                 byte ptr [ebp - 0x49], bl
            //   50                   | push                eax
            //   57                   | push                edi

    condition:
        7 of them and filesize < 1040384
}rule win_skipper_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.skipper"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 6a03 68???????? 68???????? 6a50 }
            // n = 4, score = 600
            //   6a03                 | push                3
            //   68????????           |                     
            //   68????????           |                     
            //   6a50                 | push                0x50

        $sequence_1 = { 59 5d c3 55 8bec 33c0 50 }
            // n = 7, score = 500
            //   59                   | pop                 ecx
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   33c0                 | xor                 eax, eax
            //   50                   | push                eax

        $sequence_2 = { ff15???????? 6a00 6a00 6a00 6a00 50 }
            // n = 6, score = 500
            //   ff15????????         |                     
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   50                   | push                eax

        $sequence_3 = { 6804010000 e8???????? 6804010000 8bf8 6a00 }
            // n = 5, score = 500
            //   6804010000           | push                0x104
            //   e8????????           |                     
            //   6804010000           | push                0x104
            //   8bf8                 | mov                 edi, eax
            //   6a00                 | push                0

        $sequence_4 = { 0fb68405fcfeffff 320439 47 8847ff 4e }
            // n = 5, score = 400
            //   0fb68405fcfeffff     | push                0
            //   320439               | push                0
            //   47                   | push                0x104
            //   8847ff               | push                0x104
            //   4e                   | mov                 edi, eax

        $sequence_5 = { 03d0 8b85f8feffff 8a1a 0fb6c0 }
            // n = 4, score = 400
            //   03d0                 | push                0
            //   8b85f8feffff         | push                0
            //   8a1a                 | push                0
            //   0fb6c0               | push                0

        $sequence_6 = { e8???????? 6804010000 c7470400000000 e8???????? 6804010000 6a00 50 }
            // n = 7, score = 400
            //   e8????????           |                     
            //   6804010000           | push                0x104
            //   c7470400000000       | push                0x104
            //   e8????????           |                     
            //   6804010000           | mov                 edi, eax
            //   6a00                 | push                0
            //   50                   | push                edi

        $sequence_7 = { 6800308000 6a00 6a00 68???????? }
            // n = 4, score = 300
            //   6800308000           | push                0x803000
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   68????????           |                     

        $sequence_8 = { 83c404 6a00 6a64 52 50 e8???????? }
            // n = 6, score = 300
            //   83c404               | push                0
            //   6a00                 | push                0
            //   6a64                 | push                0
            //   52                   | push                eax
            //   50                   | push                0x104
            //   e8????????           |                     

        $sequence_9 = { 53 e8???????? 6804010000 e8???????? }
            // n = 4, score = 300
            //   53                   | push                ebx
            //   e8????????           |                     
            //   6804010000           | push                0x104
            //   e8????????           |                     

        $sequence_10 = { e8???????? 83c404 6a00 6a64 }
            // n = 4, score = 300
            //   e8????????           |                     
            //   83c404               | mov                 edi, eax
            //   6a00                 | push                eax
            //   6a64                 | push                0

        $sequence_11 = { 81c900ffffff 41 898de8feffff 8b85e0feffff 8a8c05f0feffff 888deffeffff }
            // n = 6, score = 200
            //   81c900ffffff         | push                edx
            //   41                   | push                eax
            //   898de8feffff         | jmp                 0xffffffd2
            //   8b85e0feffff         | mov                 dword ptr [ebp - 0x118], 0
            //   8a8c05f0feffff       | mov                 dword ptr [ebp - 0x120], 0
            //   888deffeffff         | jmp                 0x1b

        $sequence_12 = { 450fb608 4803d0 0fb602 418800 }
            // n = 4, score = 200
            //   450fb608             | movzx               eax, cl
            //   4803d0               | dec                 esp
            //   0fb602               | lea                 eax, [esp]
            //   418800               | dec                 eax

        $sequence_13 = { 0fb6c1 4c8d0424 488d1424 4c03c0 }
            // n = 4, score = 200
            //   0fb6c1               | inc                 ecx
            //   4c8d0424             | dec                 eax
            //   488d1424             | arpl                cx, ax
            //   4c03c0               | movzx               edx, byte ptr [esp + eax]

        $sequence_14 = { f77d0c 8b4508 0fb61410 03ca 81e1ff000080 }
            // n = 5, score = 200
            //   f77d0c               | push                0x64
            //   8b4508               | push                edx
            //   0fb61410             | push                eax
            //   03ca                 | add                 esp, 4
            //   81e1ff000080         | push                0

        $sequence_15 = { 408832 4181f900010000 7c9a 488bdd 85ed 0f8e8e000000 }
            // n = 6, score = 200
            //   408832               | inc                 eax
            //   4181f900010000       | mov                 byte ptr [edx], dh
            //   7c9a                 | inc                 ecx
            //   488bdd               | cmp                 ecx, 0x100
            //   85ed                 | jl                  0xffffff9c
            //   0f8e8e000000         | dec                 eax

        $sequence_16 = { 81e1ff000080 7908 49 81c900ffffff 41 898de8feffff }
            // n = 6, score = 200
            //   81e1ff000080         | mov                 edi, eax
            //   7908                 | push                0
            //   49                   | push                edi
            //   81c900ffffff         | pop                 ecx
            //   41                   | pop                 ebp
            //   898de8feffff         | ret                 

        $sequence_17 = { 4889842400010000 4c8b9c2440010000 33c9 4963e9 }
            // n = 4, score = 200
            //   4889842400010000     | movzx               ecx, byte ptr [eax]
            //   4c8b9c2440010000     | dec                 eax
            //   33c9                 | add                 edx, eax
            //   4963e9               | movzx               eax, byte ptr [edx]

        $sequence_18 = { 488b8c2400010000 4833cc e8???????? 4c8d9c2410010000 498b5b10 }
            // n = 5, score = 200
            //   488b8c2400010000     | lea                 edx, [esp]
            //   4833cc               | dec                 esp
            //   e8????????           |                     
            //   4c8d9c2410010000     | add                 eax, eax
            //   498b5b10             | inc                 ebp

        $sequence_19 = { 038ddcfeffff 8811 e9???????? b001 8b4df4 33cd e8???????? }
            // n = 7, score = 200
            //   038ddcfeffff         | push                0
            //   8811                 | push                3
            //   e9????????           |                     
            //   b001                 | push                0x50
            //   8b4df4               | push                0
            //   33cd                 | push                3
            //   e8????????           |                     

        $sequence_20 = { 0f8e8e000000 492bfb ffc1 81e1ff000080 }
            // n = 4, score = 200
            //   0f8e8e000000         | inc                 ecx
            //   492bfb               | mov                 byte ptr [eax], al
            //   ffc1                 | dec                 eax
            //   81e1ff000080         | mov                 ecx, dword ptr [esp + 0x100]

        $sequence_21 = { 7907 48 0d00ffffff 40 8945f8 8b4df8 0fb6940df0feffff }
            // n = 7, score = 200
            //   7907                 | push                0
            //   48                   | push                0
            //   0d00ffffff           | push                0
            //   40                   | push                eax
            //   8945f8               | push                edi
            //   8b4df8               | push                8
            //   0fb6940df0feffff     | push                0

        $sequence_22 = { 8a85effeffff 888415f0feffff 0fb64df8 0fb6940df0feffff 0fb645fc 0fb68c05f0feffff }
            // n = 6, score = 200
            //   8a85effeffff         | push                0x64
            //   888415f0feffff       | push                edx
            //   0fb64df8             | push                eax
            //   0fb6940df0feffff     | add                 esp, 4
            //   0fb645fc             | push                0
            //   0fb68c05f0feffff     | push                0x64

        $sequence_23 = { ffc0 488d5201 3d00010000 7cf1 448bc1 448bc9 }
            // n = 6, score = 200
            //   ffc0                 | dec                 eax
            //   488d5201             | xor                 ecx, esp
            //   3d00010000           | dec                 esp
            //   7cf1                 | lea                 ebx, [esp + 0x110]
            //   448bc1               | dec                 ecx
            //   448bc9               | mov                 ebx, dword ptr [ebx + 0x10]

        $sequence_24 = { ebd0 c785e8feffff00000000 c785e0feffff00000000 eb0f 8b85e0feffff }
            // n = 5, score = 200
            //   ebd0                 | mov                 edi, eax
            //   c785e8feffff00000000     | push    0
            //   c785e0feffff00000000     | push    edi
            //   eb0f                 | push                0x104
            //   8b85e0feffff         | push                0x104

        $sequence_25 = { 81e1ff000080 7d0a ffc9 81c900ffffff ffc1 4863c1 0fb61404 }
            // n = 7, score = 200
            //   81e1ff000080         | mov                 ebx, ebp
            //   7d0a                 | test                ebp, ebp
            //   ffc9                 | jle                 0x96
            //   81c900ffffff         | and                 ecx, 0x800000ff
            //   ffc1                 | jge                 0xc
            //   4863c1               | dec                 ecx
            //   0fb61404             | or                  ecx, 0xffffff00

        $sequence_26 = { 8955fc 0fb645f8 8a8c05f0feffff 888deffeffff 0fb655fc }
            // n = 5, score = 200
            //   8955fc               | push                ebp
            //   0fb645f8             | mov                 ebp, esp
            //   8a8c05f0feffff       | xor                 eax, eax
            //   888deffeffff         | push                eax
            //   0fb655fc             | push                0

        $sequence_27 = { 0f84a9010000 488bc8 ff15???????? 488d15e1580000 488bcb }
            // n = 5, score = 100
            //   0f84a9010000         | jne                 0x295
            //   488bc8               | inc                 ecx
            //   ff15????????         |                     
            //   488d15e1580000       | inc                 edi
            //   488bcb               | dec                 eax

        $sequence_28 = { c785d4feffff3a040000 eb0a c785d4feffffffff1f00 8b4508 }
            // n = 4, score = 100
            //   c785d4feffff3a040000     | mov    dword ptr [ebp - 0x12c], 0x43a
            //   eb0a                 | jmp                 0xc
            //   c785d4feffffffff1f00     | mov    dword ptr [ebp - 0x12c], 0x1fffff
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]

        $sequence_29 = { 83c40c c78560ffffff94000000 8d8d60ffffff 51 ff15???????? 83bd64ffffff05 }
            // n = 6, score = 100
            //   83c40c               | add                 esp, 0xc
            //   c78560ffffff94000000     | mov    dword ptr [ebp - 0xa0], 0x94
            //   8d8d60ffffff         | lea                 ecx, [ebp - 0xa0]
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   83bd64ffffff05       | cmp                 dword ptr [ebp - 0x9c], 5

        $sequence_30 = { e8???????? 488d05bf7f0000 488d5547 488d4de7 48894547 e8???????? 488d05977f0000 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   488d05bf7f0000       | push                eax
            //   488d5547             | push                0x104
            //   488d4de7             | push                0x104
            //   48894547             | mov                 edi, eax
            //   e8????????           |                     
            //   488d05977f0000       | push                0x104

        $sequence_31 = { 4863c6 488d15e5b90000 ffc6 488d0c80 488d0cca baa00f0000 }
            // n = 6, score = 100
            //   4863c6               | push                edi
            //   488d15e5b90000       | push                eax
            //   ffc6                 | push                0
            //   488d0c80             | push                0
            //   488d0cca             | push                0
            //   baa00f0000           | push                0

        $sequence_32 = { 8985e4feffff 6a04 6800300000 6804010000 6a00 8b95e4feffff 52 }
            // n = 7, score = 100
            //   8985e4feffff         | mov                 dword ptr [ebp - 0x11c], eax
            //   6a04                 | push                4
            //   6800300000           | push                0x3000
            //   6804010000           | push                0x104
            //   6a00                 | push                0
            //   8b95e4feffff         | mov                 edx, dword ptr [ebp - 0x11c]
            //   52                   | push                edx

        $sequence_33 = { 488d15f5be0000 488bc8 e8???????? 84c0 0f858d020000 41ffc7 4883c614 }
            // n = 7, score = 100
            //   488d15f5be0000       | push                0
            //   488bc8               | push                0
            //   e8????????           |                     
            //   84c0                 | push                eax
            //   0f858d020000         | push                0
            //   41ffc7               | push                0
            //   4883c614             | push                0

        $sequence_34 = { 8d34fd1ca92300 ff36 e8???????? 59 }
            // n = 4, score = 100
            //   8d34fd1ca92300       | lea                 esi, [edi*8 + 0x23a91c]
            //   ff36                 | push                dword ptr [esi]
            //   e8????????           |                     
            //   59                   | pop                 ecx

        $sequence_35 = { 55 8bec 8b4508 ff34c570a02300 ff15???????? }
            // n = 5, score = 100
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   ff34c570a02300       | push                dword ptr [eax*8 + 0x23a070]
            //   ff15????????         |                     

        $sequence_36 = { 4885c0 7528 ff15???????? 83f857 0f85db010000 488d0df4580000 ff15???????? }
            // n = 7, score = 100
            //   4885c0               | add                 esi, 0x14
            //   7528                 | dec                 esp
            //   ff15????????         |                     
            //   83f857               | lea                 ebx, [eax + eax*2]
            //   0f85db010000         | dec                 esp
            //   488d0df4580000       | lea                 esi, [0x9e15]
            //   ff15????????         |                     

        $sequence_37 = { 8d34c570a02300 833e00 7513 50 }
            // n = 4, score = 100
            //   8d34c570a02300       | lea                 esi, [eax*8 + 0x23a070]
            //   833e00               | cmp                 dword ptr [esi], 0
            //   7513                 | jne                 0x15
            //   50                   | push                eax

        $sequence_38 = { 898ddcfeffff 8d95e0feffff 52 6a00 8b85d8feffff 50 8b8dd0feffff }
            // n = 7, score = 100
            //   898ddcfeffff         | mov                 dword ptr [ebp - 0x124], ecx
            //   8d95e0feffff         | lea                 edx, [ebp - 0x120]
            //   52                   | push                edx
            //   6a00                 | push                0
            //   8b85d8feffff         | mov                 eax, dword ptr [ebp - 0x128]
            //   50                   | push                eax
            //   8b8dd0feffff         | mov                 ecx, dword ptr [ebp - 0x130]

        $sequence_39 = { 894df8 894df4 894df0 85db }
            // n = 4, score = 100
            //   894df8               | mov                 dword ptr [ebp - 8], ecx
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx
            //   894df0               | mov                 dword ptr [ebp - 0x10], ecx
            //   85db                 | test                ebx, ebx

        $sequence_40 = { 7326 e9???????? 8a03 488d1510aa0000 ffc7 }
            // n = 5, score = 100
            //   7326                 | push                0
            //   e9????????           |                     
            //   8a03                 | push                edi
            //   488d1510aa0000       | push                4
            //   ffc7                 | mov                 dword ptr [edi], 0

        $sequence_41 = { 33db 895dd8 83fb40 0f8d42010000 8b3c9d606d4100 }
            // n = 5, score = 100
            //   33db                 | xor                 ebx, ebx
            //   895dd8               | mov                 dword ptr [ebp - 0x28], ebx
            //   83fb40               | cmp                 ebx, 0x40
            //   0f8d42010000         | jge                 0x148
            //   8b3c9d606d4100       | mov                 edi, dword ptr [ebx*4 + 0x416d60]

        $sequence_42 = { 8bcf e8???????? b84d5a0000 66390502deffff 7404 33db }
            // n = 6, score = 100
            //   8bcf                 | dec                 eax
            //   e8????????           |                     
            //   b84d5a0000           | lea                 edx, [0xbef5]
            //   66390502deffff       | dec                 eax
            //   7404                 | mov                 ecx, eax
            //   33db                 | test                al, al

        $sequence_43 = { 668b4c4310 66890c4590b22300 40 ebe8 33c0 }
            // n = 5, score = 100
            //   668b4c4310           | mov                 cx, word ptr [ebx + eax*2 + 0x10]
            //   66890c4590b22300     | mov                 word ptr [eax*2 + 0x23b290], cx
            //   40                   | inc                 eax
            //   ebe8                 | jmp                 0xffffffea
            //   33c0                 | xor                 eax, eax

        $sequence_44 = { 4c8d1c40 4c8d35159e0000 bd04000000 49c1e304 4d03cb }
            // n = 5, score = 100
            //   4c8d1c40             | push                0
            //   4c8d35159e0000       | push                0x104
            //   bd04000000           | push                0x104
            //   49c1e304             | mov                 edi, eax
            //   4d03cb               | push                0

    condition:
        7 of them and filesize < 262144
}rule win_turla_rpc_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.turla_rpc"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c6854801000055 c78560010000013c3830 c785640100003a202155 c785a8010000271c3367 }
            // n = 4, score = 200
            //   c6854801000055       | mov                 dword ptr [ebp + 0x60], 0x34302716
            //   c78560010000013c3830     | mov    byte ptr [ebp + 0x8c], 0x55
            //   c785640100003a202155     | mov    dword ptr [ebp + 0xe0], 0x3213012
            //   c785a8010000271c3367     | mov    dword ptr [ebp + 0xe4], 0x3c262730

        $sequence_1 = { c7455016393a26 c74554301d343b c7455831393055 c7456016273034 }
            // n = 4, score = 200
            //   c7455016393a26       | mov                 dword ptr [ebp - 0x70], 0x3b263622
            //   c74554301d343b       | mov                 dword ptr [ebp - 0x6c], 0x55213436
            //   c7455831393055       | mov                 dword ptr [esp + 0x58], 0x39263622
            //   c7456016273034       | mov                 word ptr [esp + 0x5c], 0x3b30

        $sequence_2 = { ffd3 488d4d70 488bf8 ffd3 488d4d10 488bf0 ffd3 }
            // n = 7, score = 200
            //   ffd3                 | call                ebx
            //   488d4d70             | dec                 eax
            //   488bf8               | lea                 ecx, [ebp + 0x70]
            //   ffd3                 | dec                 eax
            //   488d4d10             | mov                 edi, eax
            //   488bf0               | call                ebx
            //   ffd3                 | dec                 eax

        $sequence_3 = { c7851001000016273034 c7851401000021300527 c785180100003a363026 66c7851c0100002602 }
            // n = 4, score = 200
            //   c7851001000016273034     | mov    dword ptr [ebp + 0x110], 0x34302716
            //   c7851401000021300527     | mov    dword ptr [ebp + 0x114], 0x27053021
            //   c785180100003a363026     | mov    dword ptr [ebp + 0x118], 0x2630363a
            //   66c7851c0100002602     | mov    word ptr [ebp + 0x11c], 0x226

        $sequence_4 = { c7452427217b31 66c745283939 c6452a55 c745703e30273b c7457430396667 }
            // n = 5, score = 200
            //   c7452427217b31       | mov                 dword ptr [ebp + 0x24], 0x317b2127
            //   66c745283939         | mov                 word ptr [ebp + 0x28], 0x3939
            //   c6452a55             | mov                 byte ptr [ebp + 0x2a], 0x55
            //   c745703e30273b       | mov                 dword ptr [ebp + 0x70], 0x3b27303e
            //   c7457430396667       | mov                 dword ptr [ebp + 0x74], 0x67663930

        $sequence_5 = { c745b06970746f c745b472536163 66c745b86c00 ff15???????? }
            // n = 4, score = 200
            //   c745b06970746f       | mov                 dword ptr [ebp - 0x50], 0x6f747069
            //   c745b472536163       | mov                 dword ptr [ebp - 0x4c], 0x63615372
            //   66c745b86c00         | mov                 word ptr [ebp - 0x48], 0x6c
            //   ff15????????         |                     

        $sequence_6 = { f30f7f8550010000 660f6f05???????? c6858c00000055 c785e000000012302103 c785e40000003027263c c785e80000003a3b102d f30f7f85e0010000 }
            // n = 7, score = 200
            //   f30f7f8550010000     | movdqu              xmmword ptr [ebp + 0x150], xmm0
            //   660f6f05????????     |                     
            //   c6858c00000055       | mov                 byte ptr [ebp + 0x8c], 0x55
            //   c785e000000012302103     | mov    dword ptr [ebp + 0xe0], 0x3213012
            //   c785e40000003027263c     | mov    dword ptr [ebp + 0xe4], 0x3c262730
            //   c785e80000003a3b102d     | mov    dword ptr [ebp + 0xe8], 0x2d103b3a
            //   f30f7f85e0010000     | movdqu              xmmword ptr [ebp + 0x1e0], xmm0

        $sequence_7 = { c6450a55 c745980a22333a c7459c25303b55 c744247836343939 66c744247c3a36 c644247e55 c745883336393a }
            // n = 7, score = 200
            //   c6450a55             | mov                 dword ptr [ebp + 0xc0], 0x10213006
            //   c745980a22333a       | mov                 dword ptr [ebp + 0xc4], 0x273a2727
            //   c7459c25303b55       | mov                 dword ptr [ebp + 0xc8], 0x30313a18
            //   c744247836343939     | mov                 byte ptr [ebp + 0xcc], 0x55
            //   66c744247c3a36       | mov                 byte ptr [ebp + 0xa], 0x55
            //   c644247e55           | mov                 dword ptr [ebp - 0x68], 0x3a33220a
            //   c745883336393a       | mov                 dword ptr [ebp - 0x64], 0x553b3025

        $sequence_8 = { c644247655 c744246022362636 66c74424643825 c644246655 c745902236263b c7459436342155 c744245822362639 }
            // n = 7, score = 200
            //   c644247655           | mov                 byte ptr [esp + 0x76], 0x55
            //   c744246022362636     | mov                 dword ptr [esp + 0x60], 0x36263622
            //   66c74424643825       | mov                 word ptr [esp + 0x64], 0x2538
            //   c644246655           | mov                 byte ptr [esp + 0x66], 0x55
            //   c745902236263b       | mov                 dword ptr [ebp - 0x70], 0x3b263622
            //   c7459436342155       | mov                 dword ptr [ebp - 0x6c], 0x55213436
            //   c744245822362639     | mov                 dword ptr [esp + 0x58], 0x39263622

        $sequence_9 = { 8b8d6cfdffff 89410c 8d8580feffff 50 57 ff9570fdffff 8b8d6cfdffff }
            // n = 7, score = 100
            //   8b8d6cfdffff         | mov                 ecx, dword ptr [ebp - 0x294]
            //   89410c               | mov                 dword ptr [ecx + 0xc], eax
            //   8d8580feffff         | lea                 eax, [ebp - 0x180]
            //   50                   | push                eax
            //   57                   | push                edi
            //   ff9570fdffff         | call                dword ptr [ebp - 0x290]
            //   8b8d6cfdffff         | mov                 ecx, dword ptr [ebp - 0x294]

        $sequence_10 = { e8???????? 59 8365fc00 8b049dd8860110 f644380401 7413 }
            // n = 6, score = 100
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   8365fc00             | and                 dword ptr [ebp - 4], 0
            //   8b049dd8860110       | mov                 eax, dword ptr [ebx*4 + 0x100186d8]
            //   f644380401           | test                byte ptr [eax + edi + 4], 1
            //   7413                 | je                  0x15

        $sequence_11 = { c1ef02 3b850cffffff 0f47f9 85ff 7413 ff36 }
            // n = 6, score = 100
            //   c1ef02               | shr                 edi, 2
            //   3b850cffffff         | cmp                 eax, dword ptr [ebp - 0xf4]
            //   0f47f9               | cmova               edi, ecx
            //   85ff                 | test                edi, edi
            //   7413                 | je                  0x15
            //   ff36                 | push                dword ptr [esi]

        $sequence_12 = { c78538ffffff16273034 c7853cffffff2130013d c78540ffffff27303431 c68544ffffff55 c745b011303930 c745b42130133c }
            // n = 6, score = 100
            //   c78538ffffff16273034     | mov    dword ptr [ebp - 0xc8], 0x34302716
            //   c7853cffffff2130013d     | mov    dword ptr [ebp - 0xc4], 0x3d013021
            //   c78540ffffff27303431     | mov    dword ptr [ebp - 0xc0], 0x31343027
            //   c68544ffffff55       | mov                 byte ptr [ebp - 0xbc], 0x55
            //   c745b011303930       | mov                 dword ptr [ebp - 0x50], 0x30393011
            //   c745b42130133c       | mov                 dword ptr [ebp - 0x4c], 0x3c133021

        $sequence_13 = { 83c408 8945c8 85c0 0f8480000000 }
            // n = 4, score = 100
            //   83c408               | add                 esp, 8
            //   8945c8               | mov                 dword ptr [ebp - 0x38], eax
            //   85c0                 | test                eax, eax
            //   0f8480000000         | je                  0x86

        $sequence_14 = { 7311 f30f7e0e 83e908 8d7608 660fd60f 8d7f08 8b048d48350010 }
            // n = 7, score = 100
            //   7311                 | jae                 0x13
            //   f30f7e0e             | movq                xmm1, qword ptr [esi]
            //   83e908               | sub                 ecx, 8
            //   8d7608               | lea                 esi, [esi + 8]
            //   660fd60f             | movq                qword ptr [edi], xmm1
            //   8d7f08               | lea                 edi, [edi + 8]
            //   8b048d48350010       | mov                 eax, dword ptr [ecx*4 + 0x10003548]

        $sequence_15 = { 8b0485d8860110 80643004fd 8b45f8 8b55fc 5f 5e }
            // n = 6, score = 100
            //   8b0485d8860110       | mov                 eax, dword ptr [eax*4 + 0x100186d8]
            //   80643004fd           | and                 byte ptr [eax + esi + 4], 0xfd
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   8b55fc               | mov                 edx, dword ptr [ebp - 4]
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

    condition:
        7 of them and filesize < 311296
}rule win_turla_silentmoon_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.turla_silentmoon"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 41 894df4 83f910 0f8c30ffffff 83be6802000003 7c23 }
            // n = 6, score = 300
            //   41                   | inc                 ecx
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx
            //   83f910               | cmp                 ecx, 0x10
            //   0f8c30ffffff         | jl                  0xffffff36
            //   83be6802000003       | cmp                 dword ptr [esi + 0x268], 3
            //   7c23                 | jl                  0x25

        $sequence_1 = { 6a08 50 43 ff15???????? 56 }
            // n = 5, score = 300
            //   6a08                 | push                8
            //   50                   | push                eax
            //   43                   | inc                 ebx
            //   ff15????????         |                     
            //   56                   | push                esi

        $sequence_2 = { 51 ffd3 eb06 ff15???????? 8b15???????? 56 6a00 }
            // n = 7, score = 300
            //   51                   | push                ecx
            //   ffd3                 | call                ebx
            //   eb06                 | jmp                 8
            //   ff15????????         |                     
            //   8b15????????         |                     
            //   56                   | push                esi
            //   6a00                 | push                0

        $sequence_3 = { ff04be 8d3cbe 0fb77c4b30 03f8 ff04be 8d3cbe 0fb77c4b32 }
            // n = 7, score = 300
            //   ff04be               | inc                 dword ptr [esi + edi*4]
            //   8d3cbe               | lea                 edi, [esi + edi*4]
            //   0fb77c4b30           | movzx               edi, word ptr [ebx + ecx*2 + 0x30]
            //   03f8                 | add                 edi, eax
            //   ff04be               | inc                 dword ptr [esi + edi*4]
            //   8d3cbe               | lea                 edi, [esi + edi*4]
            //   0fb77c4b32           | movzx               edi, word ptr [ebx + ecx*2 + 0x32]

        $sequence_4 = { e8???????? 83c444 6a03 c78424440100001c010000 c784244801000006000000 6a02 56 }
            // n = 7, score = 300
            //   e8????????           |                     
            //   83c444               | add                 esp, 0x44
            //   6a03                 | push                3
            //   c78424440100001c010000     | mov    dword ptr [esp + 0x144], 0x11c
            //   c784244801000006000000     | mov    dword ptr [esp + 0x148], 6
            //   6a02                 | push                2
            //   56                   | push                esi

        $sequence_5 = { 8d4a01 8b55ec 894df8 3b8e74020000 0f8c15f4ffff 83be6802000003 }
            // n = 6, score = 300
            //   8d4a01               | lea                 ecx, [edx + 1]
            //   8b55ec               | mov                 edx, dword ptr [ebp - 0x14]
            //   894df8               | mov                 dword ptr [ebp - 8], ecx
            //   3b8e74020000         | cmp                 ecx, dword ptr [esi + 0x274]
            //   0f8c15f4ffff         | jl                  0xfffff41b
            //   83be6802000003       | cmp                 dword ptr [esi + 0x268], 3

        $sequence_6 = { 83fe7b 7407 32c0 5e 8be5 5d c3 }
            // n = 7, score = 300
            //   83fe7b               | cmp                 esi, 0x7b
            //   7407                 | je                  9
            //   32c0                 | xor                 al, al
            //   5e                   | pop                 esi
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 

        $sequence_7 = { 89148e 42 3bd0 7ce2 99 }
            // n = 5, score = 300
            //   89148e               | mov                 dword ptr [esi + ecx*4], edx
            //   42                   | inc                 edx
            //   3bd0                 | cmp                 edx, eax
            //   7ce2                 | jl                  0xffffffe4
            //   99                   | cdq                 

        $sequence_8 = { 8b5044 8b7024 880c32 015844 8a4838 }
            // n = 5, score = 300
            //   8b5044               | mov                 edx, dword ptr [eax + 0x44]
            //   8b7024               | mov                 esi, dword ptr [eax + 0x24]
            //   880c32               | mov                 byte ptr [edx + esi], cl
            //   015844               | add                 dword ptr [eax + 0x44], ebx
            //   8a4838               | mov                 cl, byte ptr [eax + 0x38]

        $sequence_9 = { 0f8f82fcffff 5f 5b 8be5 5d c3 8b0d???????? }
            // n = 7, score = 300
            //   0f8f82fcffff         | jg                  0xfffffc88
            //   5f                   | pop                 edi
            //   5b                   | pop                 ebx
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   8b0d????????         |                     

    condition:
        7 of them and filesize < 204800
}rule win_uroburos_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-08-17"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.4.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.uroburos"
        malpedia_rule_date = "20200817,20200831"
        malpedia_hash = "8c895fd01eccb47a6225bcb1a3ba53cbb98644c5"
        malpedia_version = "20200831"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using yara-signator.
     * The code and documentation / approach is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 7503 21450c 837d0c00 7411 a1???????? 09c0 7408 }
            // n = 7, score = 300
            //   7503                 | test                ch, 1
            //   21450c               | mov                 eax, esp
            //   837d0c00             | mov                 dword ptr [esp + 0x38], eax
            //   7411                 | mov                 eax, dword ptr [esp + 0xe0]
            //   a1????????           |                     
            //   09c0                 | inc                 ecx
            //   7408                 | mov                 edx, ebp

        $sequence_1 = { 53 e8???????? 83fe01 89450c 750c 09c0 }
            // n = 6, score = 300
            //   53                   | or                  eax, eax
            //   e8????????           |                     
            //   83fe01               | jne                 7
            //   89450c               | and                 dword ptr [ebp + 0xc], eax
            //   750c                 | cmp                 dword ptr [ebp + 0xc], 0
            //   09c0                 | je                  0x1a

        $sequence_2 = { 09c0 750e 3905???????? 7e2c ff0d???????? 83f801 }
            // n = 6, score = 300
            //   09c0                 | jne                 0x35
            //   750e                 | cmp                 esi, 0x7fffffff
            //   3905????????         |                     
            //   7e2c                 | jbe                 0x2d
            //   ff0d????????         |                     
            //   83f801               | inc                 eax

        $sequence_3 = { 09c0 7537 57 50 53 e8???????? 09f6 }
            // n = 7, score = 300
            //   09c0                 | cmp                 dword ptr [ebp + 0xc], 0
            //   7537                 | jmp                 0x15
            //   57                   | mov                 ecx, dword ptr [ecx]
            //   50                   | or                  ecx, ecx
            //   53                   | je                  0xd
            //   e8????????           |                     
            //   09f6                 | call                ecx

        $sequence_4 = { 09c9 7407 ffd1 a1???????? 832d????????04 3905???????? 73de }
            // n = 7, score = 300
            //   09c9                 | mov                 esi, esp
            //   7407                 | dec                 eax
            //   ffd1                 | mov                 ecx, edi
            //   a1????????           |                     
            //   832d????????04       |                     
            //   3905????????         |                     
            //   73de                 | dec                 eax

        $sequence_5 = { 7526 85d2 7411 8b493c 8bc2 }
            // n = 5, score = 300
            //   7526                 | jne                 0x28
            //   85d2                 | test                edx, edx
            //   7411                 | je                  0x13
            //   8b493c               | mov                 ecx, dword ptr [ecx + 0x3c]
            //   8bc2                 | mov                 eax, edx

        $sequence_6 = { e8???????? 50 5f 09ff 59 }
            // n = 5, score = 300
            //   e8????????           |                     
            //   50                   | push                ebx
            //   5f                   | or                  eax, eax
            //   09ff                 | jne                 7
            //   59                   | and                 dword ptr [ebp + 0xc], eax

        $sequence_7 = { 09c0 7503 21450c 837d0c00 }
            // n = 4, score = 300
            //   09c0                 | mov                 ebp, ecx
            //   7503                 | dec                 eax
            //   21450c               | dec                 eax
            //   837d0c00             | mov                 dword ptr [eax - 0x20], edi

        $sequence_8 = { 8b0d???????? 8b09 09c9 7407 }
            // n = 4, score = 300
            //   8b0d????????         |                     
            //   8b09                 | je                  0x17
            //   09c9                 | or                  eax, eax
            //   7407                 | je                  0x12          

        $sequence_10 = { 418bcc 4889442420 e8???????? 8bd8 488bcf e8???????? 8bc3 }
            // n = 7, score = 200
            //   418bcc               | jne                 9
            //   4889442420           | mov                 eax, 0x21590004
            //   e8????????           |                     
            //   8bd8                 | jmp                 0x42
            //   488bcf               | inc                 ecx
            //   e8????????           |                     
            //   8bc3                 | mov                 eax, 0x104

        $sequence_12 = { 89742420 e8???????? 85c0 750a }
            // n = 4, score = 200
            //   89742420             | jne                 0x28
            //   e8????????           |                     
            //   85c0                 | test                edx, edx
            //   750a                 | je                  0x15

        $sequence_13 = { ff15???????? bb08005921 f7d8 1bc9 }
            // n = 4, score = 200
            //   ff15????????         |                     
            //   bb08005921           | mov                 ebx, 0x21590008
            //   f7d8                 | neg                 eax
            //   1bc9                 | sbb                 ecx, ecx

        $sequence_17 = { e8???????? 85c0 740e 8d9891010000 81cb00005921 eb02 33db }
            // n = 7, score = 200
            //   e8????????           |                     
            //   85c0                 | mov                 esi, dword ptr [ebp + 0xc]
            //   740e                 | or                  esi, esi
            //   8d9891010000         | push                edi
            //   81cb00005921         | mov                 edi, dword ptr [ebp + 0x10]
            //   eb02                 | jne                 0xf
            //   33db                 | jne                 0x28

        $sequence_19 = { 4881c108010000 483bc1 7211 4963403c 42813c0050450000 7503 33c0 }
            // n = 7, score = 200
            //   4881c108010000       | dec                 eax
            //   483bc1               | add                 ecx, 0x108
            //   7211                 | dec                 eax
            //   4963403c             | cmp                 eax, ecx
            //   42813c0050450000     | jb                  0x13
            //   7503                 | dec                 ecx
            //   33c0                 | arpl                word ptr [eax + 0x3c], ax

        $sequence_20 = { e9???????? 4d85c0 750a b867005921 e9???????? 448bc1 }
            // n = 6, score = 200
            //   e9????????           |                     
            //   4d85c0               | dec                 eax
            //   750a                 | mov                 edx, ebx
            //   b867005921           | dec                 eax
            //   e9????????           |                     
            //   448bc1               | mov                 ecx, eax

        $sequence_21 = { e8???????? 3bc3 740c 0591010000 0d00005921 }
            // n = 5, score = 200
            //   e8????????           |                     
            //   3bc3                 | test                edx, edx
            //   740c                 | je                  0x15
            //   0591010000           | mov                 ecx, dword ptr [ecx + 0x3c]
            //   0d00005921           | mov                 eax, edx

        $sequence_22 = { 7507 b804005921 eb40 41b804010000 488bd3 488bc8 }
            // n = 6, score = 200
            //   7507                 | mov                 ecx, dword ptr [ecx + 0x3c]
            //   b804005921           | mov                 eax, edx
            //   eb40                 | dec                 eax
            //   41b804010000         | add                 ecx, 0x108
            //   488bd3               | dec                 eax
            //   488bc8               | cmp                 eax, ecx

        $sequence_23 = { 8bce ff15???????? 3d040000c0 751c }
            // n = 4, score = 200
            //   8bce                 | mov                 ecx, esi
            //   ff15????????         |                     
            //   3d040000c0           | cmp                 eax, 0xc0000004
            //   751c                 | jne                 0x1e

        $sequence_26 = { c744242000200000 ff15???????? 85c0 742d }
            // n = 4, score = 200
            //   c744242000200000     | mov                 dword ptr [esp + 0x20], 0x2000
            //   ff15????????         |                     
            //   85c0                 | test                eax, eax
            //   742d                 | je                  0x2f

    condition:
        7 of them and filesize < 1136640
}
rule win_wipbot_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.wipbot"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { ba48ed8e43 48 89cb b98855514f e8???????? 48 }
            // n = 6, score = 100
            //   ba48ed8e43           | mov                 edx, 0x438eed48
            //   48                   | dec                 eax
            //   89cb                 | mov                 ebx, ecx
            //   b98855514f           | mov                 ecx, 0x4f515588
            //   e8????????           |                     
            //   48                   | dec                 eax

        $sequence_1 = { 48 85c0 48 89c3 7504 31c0 eb44 }
            // n = 7, score = 100
            //   48                   | dec                 eax
            //   85c0                 | test                eax, eax
            //   48                   | dec                 eax
            //   89c3                 | mov                 ebx, eax
            //   7504                 | jne                 6
            //   31c0                 | xor                 eax, eax
            //   eb44                 | jmp                 0x46

        $sequence_2 = { 3211 83f22e 83f80a 8811 75ec 8d45bd }
            // n = 6, score = 100
            //   3211                 | xor                 dl, byte ptr [ecx]
            //   83f22e               | xor                 edx, 0x2e
            //   83f80a               | cmp                 eax, 0xa
            //   8811                 | mov                 byte ptr [ecx], dl
            //   75ec                 | jne                 0xffffffee
            //   8d45bd               | lea                 eax, [ebp - 0x43]

        $sequence_3 = { 89cb 48 89d6 7504 }
            // n = 4, score = 100
            //   89cb                 | mov                 ebx, ecx
            //   48                   | dec                 eax
            //   89d6                 | mov                 esi, edx
            //   7504                 | jne                 6

        $sequence_4 = { 83f806 880e 75ee 8b8584feffff c685acfeffff00 895c2410 }
            // n = 6, score = 100
            //   83f806               | cmp                 eax, 6
            //   880e                 | mov                 byte ptr [esi], cl
            //   75ee                 | jne                 0xfffffff0
            //   8b8584feffff         | mov                 eax, dword ptr [ebp - 0x17c]
            //   c685acfeffff00       | mov                 byte ptr [ebp - 0x154], 0
            //   895c2410             | mov                 dword ptr [esp + 0x10], ebx

        $sequence_5 = { 8b5de0 e8???????? 85c0 741a c744240400000000 891c24 }
            // n = 6, score = 100
            //   8b5de0               | mov                 ebx, dword ptr [ebp - 0x20]
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   741a                 | je                  0x1c
            //   c744240400000000     | mov                 dword ptr [esp + 4], 0
            //   891c24               | mov                 dword ptr [esp], ebx

        $sequence_6 = { 31c9 4c 8d4c2428 4c 8d442430 ffd0 }
            // n = 6, score = 100
            //   31c9                 | xor                 ecx, ecx
            //   4c                   | dec                 esp
            //   8d4c2428             | lea                 ecx, [esp + 0x28]
            //   4c                   | dec                 esp
            //   8d442430             | lea                 eax, [esp + 0x30]
            //   ffd0                 | call                eax

        $sequence_7 = { ba35c7e45c 6689442430 b98a758b1f ffc0 48 c744242800000000 6689442432 }
            // n = 7, score = 100
            //   ba35c7e45c           | mov                 edx, 0x5ce4c735
            //   6689442430           | mov                 word ptr [esp + 0x30], ax
            //   b98a758b1f           | mov                 ecx, 0x1f8b758a
            //   ffc0                 | inc                 eax
            //   48                   | dec                 eax
            //   c744242800000000     | mov                 dword ptr [esp + 0x28], 0
            //   6689442432           | mov                 word ptr [esp + 0x32], ax

        $sequence_8 = { 740a b801000000 e9???????? 01c1 89c3 894de4 }
            // n = 6, score = 100
            //   740a                 | je                  0xc
            //   b801000000           | mov                 eax, 1
            //   e9????????           |                     
            //   01c1                 | add                 ecx, eax
            //   89c3                 | mov                 ebx, eax
            //   894de4               | mov                 dword ptr [ebp - 0x1c], ecx

        $sequence_9 = { 85c0 0f8eff020000 31c0 b936000000 8dbdaefeffff }
            // n = 5, score = 100
            //   85c0                 | test                eax, eax
            //   0f8eff020000         | jle                 0x305
            //   31c0                 | xor                 eax, eax
            //   b936000000           | mov                 ecx, 0x36
            //   8dbdaefeffff         | lea                 edi, [ebp - 0x152]

    condition:
        7 of them and filesize < 253952
}
